

==================== FILE: src/factory_test/components/ft_arkanoid.cpp ====================

/**
 * @file arkanoid.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-07
 *
 * @copyright Copyright (c) 2023
 *
 */
#include "../factory_test.h"

#define screen_width 240
#define screen_heigh 135

//----------------------------------------------------------------------------------
// Some Defines
//----------------------------------------------------------------------------------
#define PLAYER_MAX_LIFE 5
#define LINES_OF_BRICKS 5
#define BRICKS_PER_LINE 20

//----------------------------------------------------------------------------------
// Types and Structures Definition
//----------------------------------------------------------------------------------
// Vector2, 2 components
typedef struct Vector2
{
    float x; // Vector x component
    float y; // Vector y component
} Vector2;

typedef struct Player
{
    Vector2 position;
    Vector2 size;
    int life;
} Player;

typedef struct Ball
{
    Vector2 position;
    Vector2 speed;
    int radius;
    bool active;
} Ball;

typedef struct Brick
{
    Vector2 position;
    bool active;
} Brick;

#define PLAY_HIT_SOUND() _tone(random(200, 600), 30)

//------------------------------------------------------------------------------------
// Global Variables Declaration
//------------------------------------------------------------------------------------
// static const int screenWidth = 800;
// static const int screenHeight = 450;
static const int screenWidth = screen_width;
static const int screenHeight = screen_heigh;

static bool gameOver = false;
static bool __pause = false;

static Player player = {0};
static Ball ball = {0};
static Brick brick[LINES_OF_BRICKS][BRICKS_PER_LINE] = {0};
static Vector2 brickSize = {0};

// //------------------------------------------------------------------------------------
// // Module Functions Declaration (local)
// //------------------------------------------------------------------------------------
// static void InitGame(void);         // Initialize game
// static void UpdateGame(void);       // Update game (one frame)
// static void DrawGame(void);         // Draw game (one frame)
// static void UnloadGame(void);       // Unload game
// static void UpdateDrawFrame(void);  // Update and Draw (one frame)

void FactoryTest::_arkanoid_start()
{
    _arkanoid_setup();
    while (1)
    {
        _arkanoid_loop();
        _check_encoder(false);
        if (ball.active)
        {
            if (_check_next())
            {
                break;
            }
        }
    }
}

void FactoryTest::_arkanoid_setup()
{
    _InitGame();

    _enc_pos = 0;
    _enc.setPosition(_enc_pos);
}

static uint32_t time_count = 0;
void FactoryTest::_arkanoid_loop()
{
    if ((millis() - time_count) > 15)
    {
        _UpdateDrawFrame();
        time_count = millis();
    }
}

//------------------------------------------------------------------------------------
// Module Functions Definitions (local)
//------------------------------------------------------------------------------------

#define GetScreenWidth() _canvas->width()

// Initialize game variables
void FactoryTest::_InitGame(void)
{
    brickSize = (Vector2){(float)GetScreenWidth() / BRICKS_PER_LINE, 10};

    // Initialize player
    // player.position = (Vector2){ screenWidth/2, screenHeight };
    player.size = (Vector2){screenWidth / 10 + 5, 5};
    player.position = (Vector2){screenWidth / 2, screenHeight - player.size.y - 6};
    player.life = PLAYER_MAX_LIFE;

    // Initialize ball
    ball.position = (Vector2){screenWidth / 2, screenHeight - player.size.y};
    ball.speed = (Vector2){0, 0};
    ball.radius = 3;
    ball.active = false;

    // Initialize bricks
    int initialDownPosition = brickSize.y / 2;

    for (int i = 0; i < LINES_OF_BRICKS; i++)
    {
        for (int j = 0; j < BRICKS_PER_LINE; j++)
        {
            brick[i][j].position = (Vector2){j * brickSize.x + brickSize.x / 2, i * brickSize.y + initialDownPosition};
            brick[i][j].active = true;
        }
    }
}

// Rectangle, 4 components
typedef struct Rectangle
{
    float x;      // Rectangle top-left corner position x
    float y;      // Rectangle top-left corner position y
    float width;  // Rectangle width
    float height; // Rectangle height
} Rectangle;

// Check collision between circle and rectangle
// NOTE: Reviewed version to take into account corner limit case
bool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec)
{
    bool collision = false;

    int recCenterX = (int)(rec.x + rec.width / 2.0f);
    int recCenterY = (int)(rec.y + rec.height / 2.0f);

    float dx = fabsf(center.x - (float)recCenterX);
    float dy = fabsf(center.y - (float)recCenterY);

    if (dx > (rec.width / 2.0f + radius))
    {
        return false;
    }
    if (dy > (rec.height / 2.0f + radius))
    {
        return false;
    }

    if (dx <= (rec.width / 2.0f))
    {
        return true;
    }
    if (dy <= (rec.height / 2.0f))
    {
        return true;
    }

    float cornerDistanceSq =
        (dx - rec.width / 2.0f) * (dx - rec.width / 2.0f) + (dy - rec.height / 2.0f) * (dy - rec.height / 2.0f);

    collision = (cornerDistanceSq <= (radius * radius));

    return collision;
}

// #define IsKeyDown(KEY_LEFT)     (lgfx::gpio_in(PIN_LEFT) == 0)
// #define IsKeyDown(KEY_RIGHT)    (lgfx::gpio_in(PIN_RIGHT) == 0)
// #define IsKeyPressed(KEY_SPACE) (lgfx::gpio_in(PIN_UP) == 0)
static long __old_pos = 0;

// Update game (one frame)
void FactoryTest::_UpdateGame(void)
{
    if (!gameOver)
    {
        // if (IsKeyPressed('P')) pause = !pause;

        if (!__pause)
        {
            // Player movement logic
            // if (IsKeyDown(KEY_LEFT)) player.position.x -= 5;
            // if ((player.position.x - player.size.x/2) <= 0) player.position.x = player.size.x/2;
            // if (IsKeyDown(KEY_RIGHT)) player.position.x += 5;
            // if ((player.position.x + player.size.x/2) >= screenWidth) player.position.x = screenWidth - player.size.x/2;

            // if (lgfx::gpio_in(PIN_LEFT) == 0) {
            //     player.position.x -= 4;
            // }
            // if ((player.position.x - player.size.x/2) <= 0) player.position.x = player.size.x/2;

            // if (lgfx::gpio_in(PIN_RIGHT) == 0) {
            //     player.position.x += 4;
            // }
            // if ((player.position.x + player.size.x/2) >= screenWidth) player.position.x = screenWidth - player.size.x/2;

            // if (_check_encoder()) {

            //     if (_enc.getDirection() == RotaryEncoder::Direction::CLOCKWISE) {
            //         player.position.x -= 4;
            //     }
            //     if ((player.position.x - player.size.x/2) <= 0) player.position.x = player.size.x/2;

            //     else if (_enc.getDirection() == RotaryEncoder::Direction::COUNTERCLOCKWISE) {
            //         player.position.x += 4;
            //     }
            //     if ((player.position.x + player.size.x/2) >= screenWidth) player.position.x = screenWidth - player.size.x/2;

            // }

            // player.position.x += _enc_pos;
            // if ((player.position.x - player.size.x/2) <= 0) player.position.x = player.size.x/2;
            // if ((player.position.x + player.size.x/2) >= screenWidth) player.position.x = screenWidth - player.size.x/2;

            if (_enc_pos < __old_pos)
            {
                player.position.x -= 6;
                if ((player.position.x - player.size.x / 2) <= 0)
                    player.position.x = player.size.x / 2;

                __old_pos = _enc_pos;
            }
            else if (_enc_pos > __old_pos)
            {
                player.position.x += 6;
                if ((player.position.x + player.size.x / 2) >= screenWidth)
                    player.position.x = screenWidth - player.size.x / 2;

                __old_pos = _enc_pos;
            }

            // Ball launching logic
            if (!ball.active)
            {
                // if (IsKeyPressed(KEY_SPACE))
                // {
                //     ball.active = true;
                //     ball.speed = (Vector2){ 0, -5 };
                // }

                // if (lgfx::gpio_in(PIN_UP) == 0)
                // {
                //     ball.active = true;
                //     ball.speed = (Vector2){ 0, -2 };
                // }

                if (_check_next())
                {
                    ball.active = true;
                    ball.speed = (Vector2){0, -2};

                    // PLAY_HIT_SOUND();
                }
            }

            // Ball movement logic
            if (ball.active)
            {
                ball.position.x += ball.speed.x;
                ball.position.y += ball.speed.y;
            }
            else
            {
                // ball.position = (Vector2){ player.position.x, screenHeight*7/8 - 30 };
                ball.position = (Vector2){player.position.x, screenHeight - player.size.y - ball.radius * 4};
            }

            // Collision logic: ball vs walls
            if (((ball.position.x + ball.radius) >= screenWidth) || ((ball.position.x - ball.radius) <= 0))
            {
                ball.speed.x *= -1;
                PLAY_HIT_SOUND();
            }
            if ((ball.position.y - ball.radius) <= 0)
            {
                ball.speed.y *= -1;
                PLAY_HIT_SOUND();
            }
            if ((ball.position.y + ball.radius) >= screenHeight)
            {
                ball.speed = (Vector2){0, 0};
                ball.active = false;

                player.life--;
            }

            // Collision logic: ball vs player
            if (CheckCollisionCircleRec(ball.position,
                                        ball.radius,
                                        (Rectangle){player.position.x - player.size.x / 2,
                                                    player.position.y - player.size.y / 2,
                                                    player.size.x,
                                                    player.size.y}))
            {
                if (ball.speed.y > 0)
                {
                    ball.speed.y *= -1;
                    ball.speed.x = (ball.position.x - player.position.x) / (player.size.x / 2) * 2;
                }

                PLAY_HIT_SOUND();
            }

            // Collision logic: ball vs bricks
            for (int i = 0; i < LINES_OF_BRICKS; i++)
            {
                for (int j = 0; j < BRICKS_PER_LINE; j++)
                {
                    if (brick[i][j].active)
                    {
                        // Hit below
                        if (((ball.position.y - ball.radius) <= (brick[i][j].position.y + brickSize.y / 2)) &&
                            ((ball.position.y - ball.radius) > (brick[i][j].position.y + brickSize.y / 2 + ball.speed.y)) &&
                            ((fabs(ball.position.x - brick[i][j].position.x)) < (brickSize.x / 2 + ball.radius * 2 / 3)) &&
                            (ball.speed.y < 0))
                        {
                            brick[i][j].active = false;
                            ball.speed.y *= -1;

                            PLAY_HIT_SOUND();
                        }
                        // Hit above
                        else if (((ball.position.y + ball.radius) >= (brick[i][j].position.y - brickSize.y / 2)) &&
                                 ((ball.position.y + ball.radius) <
                                  (brick[i][j].position.y - brickSize.y / 2 + ball.speed.y)) &&
                                 ((fabs(ball.position.x - brick[i][j].position.x)) < (brickSize.x / 2 + ball.radius * 2 / 3)) &&
                                 (ball.speed.y > 0))
                        {
                            brick[i][j].active = false;
                            ball.speed.y *= -1;

                            PLAY_HIT_SOUND();
                        }
                        // Hit left
                        else if (((ball.position.x + ball.radius) >= (brick[i][j].position.x - brickSize.x / 2)) &&
                                 ((ball.position.x + ball.radius) <
                                  (brick[i][j].position.x - brickSize.x / 2 + ball.speed.x)) &&
                                 ((fabs(ball.position.y - brick[i][j].position.y)) < (brickSize.y / 2 + ball.radius * 2 / 3)) &&
                                 (ball.speed.x > 0))
                        {
                            brick[i][j].active = false;
                            ball.speed.x *= -1;

                            PLAY_HIT_SOUND();
                        }
                        // Hit right
                        else if (((ball.position.x - ball.radius) <= (brick[i][j].position.x + brickSize.x / 2)) &&
                                 ((ball.position.x - ball.radius) >
                                  (brick[i][j].position.x + brickSize.x / 2 + ball.speed.x)) &&
                                 ((fabs(ball.position.y - brick[i][j].position.y)) < (brickSize.y / 2 + ball.radius * 2 / 3)) &&
                                 (ball.speed.x < 0))
                        {
                            brick[i][j].active = false;
                            ball.speed.x *= -1;

                            PLAY_HIT_SOUND();
                        }
                    }
                }
            }

            // Game over logic
            if (player.life <= 0)
                gameOver = true;
            else
            {
                gameOver = true;

                for (int i = 0; i < LINES_OF_BRICKS; i++)
                {
                    for (int j = 0; j < BRICKS_PER_LINE; j++)
                    {
                        if (brick[i][j].active)
                            gameOver = false;
                    }
                }
            }
        }
    }
    else
    {
        // if (IsKeyPressed(KEY_ENTER))
        // {
        _InitGame();
        gameOver = false;
        // }
    }
}

// Draw game (one frame)
void FactoryTest::_DrawGame(void)
{
    // BeginDrawing();

    // ClearBackground(RAYWHITE);
    _canvas->fillScreen((uint32_t)0xF5C396);

    if (!gameOver)
    {
        // Draw player bar
        // DrawRectangle(player.position.x - player.size.x/2, player.position.y - player.size.y/2, player.size.x, player.size.y,
        // BLACK);
        _canvas->fillRect(player.position.x - player.size.x / 2,
                          player.position.y - player.size.y / 2,
                          player.size.x,
                          player.size.y,
                          (uint32_t)0x754316);

        // Draw player lives
        // for (int i = 0; i < player.life; i++) DrawRectangle(20 + 40*i, screenHeight - 30, 35, 10, LIGHTGRAY);
        for (int i = 0; i < player.life; i++)
            _canvas->fillSmoothCircle(
                10 + (ball.radius * 3) * i, screenHeight - ball.radius * 2, ball.radius, (uint32_t)0x754316);

        // Draw ball
        // DrawCircleV(ball.position, ball.radius, MAROON);
        _canvas->fillSmoothCircle(ball.position.x, ball.position.y, ball.radius, (uint32_t)0x754316);

        // Draw bricks
        for (int i = 0; i < LINES_OF_BRICKS; i++)
        {
            for (int j = 0; j < BRICKS_PER_LINE; j++)
            {
                if (brick[i][j].active)
                {
                    // if ((i + j) % 2 == 0) DrawRectangle(brick[i][j].position.x - brickSize.x/2, brick[i][j].position.y -
                    // brickSize.y/2, brickSize.x, brickSize.y, GRAY); else DrawRectangle(brick[i][j].position.x -
                    // brickSize.x/2, brick[i][j].position.y - brickSize.y/2, brickSize.x, brickSize.y, DARKGRAY);

                    if ((i + j) % 2 == 0)
                        _canvas->fillRect(brick[i][j].position.x - brickSize.x / 2,
                                          brick[i][j].position.y - brickSize.y / 2,
                                          brickSize.x,
                                          brickSize.y,
                                          (uint32_t)0x754316);
                    else
                        _canvas->fillRect(brick[i][j].position.x - brickSize.x / 2,
                                          brick[i][j].position.y - brickSize.y / 2,
                                          brickSize.x,
                                          brickSize.y,
                                          (uint32_t)0x754316);
                }
            }
        }

        // if (pause) DrawText("GAME PAUSED", screenWidth/2 - MeasureText("GAME PAUSED", 40)/2, screenHeight/2 - 40, 40, GRAY);
    }
    // else DrawText("PRESS [ENTER] TO PLAY AGAIN", GetScreenWidth()/2 - MeasureText("PRESS [ENTER] TO PLAY AGAIN", 20)/2,
    // GetScreenHeight()/2 - 50, 20, GRAY);

    // EndDrawing();
    _canvas->pushSprite(0, 0);
}

// Unload game variables
void FactoryTest::_UnloadGame(void)
{
    // TODO: Unload all dynamic loaded data (textures, sounds, models...)
}

// Update and Draw (one frame)
void FactoryTest::_UpdateDrawFrame(void)
{
    _UpdateGame();
    _DrawGame();
}


==================== FILE: src/factory_test/components/ft_ble_test.cpp ====================

/**
 * @file ble_test.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-07
 *
 * @copyright Copyright (c) 2023
 *
 */
#include "../factory_test.h"

#define SERVICE_UUID "1bc68b2a-f3e3-11e9-81b4-2a2ae2dbcce4"
#define CHARACTERISTIC_RX_UUID "1bc68da0-f3e3-11e9-81b4-2a2ae2dbcce4"
#define CHARACTERISTIC_TX_UUID "1bc68efe-f3e3-11e9-81b4-2a2ae2dbcce4"

BLEServer* pServer = NULL;
BLEService* pService = NULL;
BLECharacteristic* pTxCharacteristic;
bool deviceConnected = false;
bool oldDeviceConnected = false;

class MyServerCallbacks : public BLEServerCallbacks
{
    void onConnect(BLEServer* pServer) { deviceConnected = true; };

    void onDisconnect(BLEServer* pServer) { deviceConnected = false; }
};

uint8_t* data = new uint8_t[128];

class MyCallbacks : public BLECharacteristicCallbacks
{
    void onWrite(BLECharacteristic* pCharacteristic) { data = pCharacteristic->getData(); }
};

void FactoryTest::_ble_test()
{
    printf("ble test\n");

    if (!_is_ble_inited)
    {
        printf("init ble server\n");

        /* Init BLE server */
        uint64_t chipid = ESP.getEfuseMac();
        String blename = "M5-" + String((uint32_t)(chipid >> 32), HEX);

        BLEDevice::init(blename.c_str());
        // BLEDevice::setPower(ESP_PWR_LVL_N12);
        pServer = BLEDevice::createServer();

        pServer->setCallbacks(new MyServerCallbacks());
        pService = pServer->createService(SERVICE_UUID);
        pTxCharacteristic = pService->createCharacteristic(CHARACTERISTIC_RX_UUID, BLECharacteristic::PROPERTY_NOTIFY);

        pTxCharacteristic->addDescriptor(new BLE2902());
        BLECharacteristic* pRxCharacteristic =
            pService->createCharacteristic(CHARACTERISTIC_TX_UUID, BLECharacteristic::PROPERTY_WRITE);
        pRxCharacteristic->setCallbacks(new MyCallbacks());

        delay(100);
        _is_ble_inited = true;
    }

    uint8_t senddata[2] = {0};

    pService->start();
    pServer->getAdvertising()->start();

    uint64_t chipid = ESP.getEfuseMac();
    String blename = "M5-" + String((uint32_t)(chipid >> 32), HEX);

    _canvas->setFont(&fonts::Font0);

    uint32_t time_count = millis();

    while (1)
    {
        _canvas->fillRect(0, 0, 240, 135, TFT_BLACK);

        _canvas->fillRect(0, 0, 240, 25, _canvas->color565(20, 20, 20));

        _canvas->setTextSize(2);
        _canvas->setTextColor(TFT_WHITE);
        _canvas->setCursor(0, 6);
        _canvas->printf("     BLE Server\n");

        if ((millis() - time_count) > 100)
        {

            if (deviceConnected)
            {
                // _canvas->pushImage(180, 16, 48, 48, (uint16_t *)icon_ble);
                _canvas->setTextColor(_canvas->color565(18, 150, 219));
                _canvas->setTextSize(3);
                _canvas->setCursor(12, 40);
                // Disbuff.printf("BLE connect!\n");
                _canvas->printf("BLE Send\n");
                _canvas->setTextSize(5);
                _canvas->setCursor(12, 85);

                if (senddata[0] % 4 == 0)
                {
                    _canvas->printf("0x%02X>  ", senddata[0]);
                }
                else if (senddata[0] % 4 == 1)
                {
                    _canvas->printf("0x%02X>>", senddata[0]);
                }
                else if (senddata[0] % 4 == 2)
                {
                    _canvas->printf("0x%02X >>", senddata[0]);
                }
                else if (senddata[0] % 4 == 3)
                {
                    _canvas->printf("0x%02X  >", senddata[0]);
                }

                senddata[1]++;
                if (senddata[1] > 3)
                {
                    senddata[1] = 0;
                    senddata[0]++;
                    pTxCharacteristic->setValue(senddata, 1);
                    pTxCharacteristic->notify();
                }
            }
            else
            {
                _canvas->setTextSize(2);
                _canvas->setCursor(0, 40);
                _canvas->setTextColor(TFT_RED);
                _canvas->printf(" BLE disconnect\n\n");
                // _canvas->setCursor(12, 45);
                _canvas->setTextColor(_canvas->color565(18, 150, 219));

                _canvas->printf(String(" Name: " + blename + "\n").c_str());
                // _canvas->setCursor(12, 70);
                _canvas->printf(" UUID: 1bc68b2a\n");
                // _canvas->pushImage(180, 16, 48, 48, (uint16_t *)icon_ble_disconnect);
            }

            _canvas_update();

            time_count = millis();
        }

        // delay(10);
        _check_encoder();
        if (_check_next())
        {
            break;
        }

        // M5.update();
        // delay(100);
        // checkAXPPress();
    }
    // while ((M5.BtnA.isPressed()) || (M5.BtnB.isPressed())) {
    //     M5.update();
    //     checkAXPPress();
    //     M5.Beep.tone(4000);
    //     delay(10);
    // }
    // delay(50);
    // M5.Beep.mute();

    _canvas->setTextColor(TFT_WHITE);
    pService->stop();
    pServer->getAdvertising()->stop();

    printf("quit ble test\n");
}


==================== FILE: src/factory_test/components/ft_disp_lgfx_cfg.hpp ====================

/**
 * @file lgfx_disp.hpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-06
 *
 * @copyright Copyright (c) 2023
 *
 */
#pragma once
#include <LovyanGFX.h>

#define LCD_MOSI_PIN 5
#define LCD_MISO_PIN -1
#define LCD_SCLK_PIN 6
#define LCD_DC_PIN 4
#define LCD_CS_PIN 7
#define LCD_RST_PIN 8
#define LCD_BUSY_PIN -1
#define LCD_BL_PIN 9

class LGFX_DinMeter : public lgfx::LGFX_Device
{
    lgfx::Panel_ST7789 _panel_instance;
    lgfx::Bus_SPI _bus_instance;
    lgfx::Light_PWM _light_instance;

public:
    LGFX_DinMeter(void)
    {
        {
            auto cfg = _bus_instance.config();

            cfg.pin_mosi = LCD_MOSI_PIN;
            cfg.pin_miso = LCD_MISO_PIN;
            cfg.pin_sclk = LCD_SCLK_PIN;
            cfg.pin_dc = LCD_DC_PIN;
            cfg.freq_write = 40000000;

            _bus_instance.config(cfg);
            _panel_instance.setBus(&_bus_instance);
        }
        {
            auto cfg = _panel_instance.config();

            cfg.invert = true;
            cfg.pin_cs = LCD_CS_PIN;
            cfg.pin_rst = LCD_RST_PIN;
            cfg.pin_busy = LCD_BUSY_PIN;
            cfg.panel_width = 135;
            cfg.panel_height = 240;
            cfg.offset_x = 52;
            cfg.offset_y = 40;
            // cfg.offset_x     = 0;
            // cfg.offset_y     = 0;

            _panel_instance.config(cfg);
        }
        { // バックライト制御の設定を行います。（必要なければ削除）
            auto cfg = _light_instance.config(); // バックライト設定用の構造体を取得します。

            cfg.pin_bl = LCD_BL_PIN; // バックライトが接続されているピン番号
            cfg.invert = false;      // バックライトの輝度を反転させる場合 true
            // cfg.freq   = 44100;           // バックライトのPWM周波数
            cfg.freq = 200;      // バックライトのPWM周波数
            cfg.pwm_channel = 7; // 使用するPWMのチャンネル番号

            _light_instance.config(cfg);
            _panel_instance.setLight(&_light_instance); // バックライトをパネルにセットします。
        }

        setPanel(&_panel_instance);
    }
};


==================== FILE: src/factory_test/components/ft_disp_test.cpp ====================

/**
 * @file disp_test.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-06
 *
 * @copyright Copyright (c) 2023
 *
 */
#include "../factory_test.h"
#include "ft_disp_lgfx_cfg.hpp"

void FactoryTest::_disp_init()
{
    _disp = new LGFX_DinMeter;
    _disp->init();
    _disp->setRotation(1);

    _canvas = new LGFX_Sprite(_disp);
    _canvas->createSprite(_disp->width(), _disp->height());
    _canvas->setRotation(1);

    // _disp->fillScreen(TFT_RED);
    // _disp->setTextColor(TFT_WHITE);
    // _disp->printf("qweqweqweqwe\n");
}

void FactoryTest::_disp_test()
{
    if (_is_test_mode)
    {
        /* Frame test */
        _canvas->fillScreen(TFT_BLACK);
        _canvas->drawRect(0, 0, _canvas->width(), _canvas->height(), TFT_GREEN);
        _canvas->drawRect(1, 1, _canvas->width() - 2, _canvas->height() - 2, TFT_GREEN);
        _canvas->drawLine(0, 0, _canvas->width(), _canvas->height(), TFT_GREEN);
        _canvas->drawLine(0, _canvas->height(), _canvas->width(), 0, TFT_GREEN);

        _canvas_update();
        _wait_next();

        /* Color test */
        std::vector<int> color_list = {TFT_RED, TFT_GREEN, TFT_BLUE, TFT_BLACK, TFT_WHITE};
        for (auto i : color_list)
        {
            _canvas->fillScreen(i);
            _canvas_update();
            _wait_next();
        }
    }
    else
    {
        float color_r, color_g, color_b;

        color_r = 0;
        color_g = 0;
        color_b = 255;

        for (int i = 0; i < 384; i = i + 4)
        {
            if (i < 128)
            {
                color_r = i * 2;
                color_g = 0;
                color_b = 255 - (i * 2);
            }
            else if ((i >= 128) && (i < 256))
            {
                color_r = 255 - ((i - 128) * 2);
                color_g = (i - 128) * 2;
                color_b = 0;
            }
            else if ((i >= 256) && (i < 384))
            {
                color_r = 0;
                color_g = 255 - ((i - 256) * 2);
                ;
                color_b = (i - 256) * 2;
                ;
            }
            _canvas->fillRect(0, 0, 240, 135, _canvas->color565(color_r, color_g, color_b));
            _canvas_update();
        }
        
        // if (_check_test_mode())
        // {
        //     return;
        // }

        for (int i = 0; i < 4; i++)
        {
            switch (i)
            {
            case 0:
                color_r = 0;
                color_g = 0;
                color_b = 0;
                break;
            case 1:
                color_r = 255;
                color_g = 0;
                color_b = 0;
                break;
            case 2:
                color_r = 0;
                color_g = 255;
                color_b = 0;
                break;
            case 3:
                color_r = 0;
                color_g = 0;
                color_b = 255;
                break;
            }
            for (int n = 0; n < 240; n++)
            {
                color_r = (color_r < 255) ? color_r + 1.0625 : 255U;
                color_g = (color_g < 255) ? color_g + 1.0625 : 255U;
                color_b = (color_b < 255) ? color_b + 1.0625 : 255U;
                _canvas->drawLine(n, i * 33.75, n, (i + 1) * 33.75, _canvas->color565(color_r, color_g, color_b));
            }
        }
        _canvas_update();
        delay(500);

        for (int i = 0; i < 4; i++)
        {
            switch (i)
            {
            case 0:
                color_r = 255;
                color_g = 255;
                color_b = 255;
                break;
            case 1:
                color_r = 255;
                color_g = 0;
                color_b = 0;
                break;
            case 2:
                color_r = 0;
                color_g = 255;
                color_b = 0;
                break;
            case 3:
                color_r = 0;
                color_g = 0;
                color_b = 255;
                break;
            }
            for (int n = 0; n < 240; n++)
            {
                color_r = (color_r > 2) ? color_r - 1.0625 : 0U;
                color_g = (color_g > 2) ? color_g - 1.0625 : 0U;
                color_b = (color_b > 2) ? color_b - 1.0625 : 0U;
                _canvas->drawLine(239 - n, i * 33.75, 239 - n, (i + 1) * 33.75, _canvas->color565(color_r, color_g, color_b));
            }
        }
        _canvas_update();
        delay(500);
    }
}

void FactoryTest::_disp_set_brightness()
{
    printf("set brightness\n");

    _canvas->setFont(&fonts::Font0);

    int brightness = _disp->getBrightness();
    long old_position = _enc_pos;
    char string_buffer[20];

    _enc_pos = 0;
    _enc.setPosition(_enc_pos);

    while (1)
    {
        _canvas->fillScreen((uint32_t)0x87C38F);

        _canvas->fillRect(0, 0, 240, 25, (uint32_t)0x07430F);
        _canvas->setTextSize(2);
        _canvas->setTextColor((uint32_t)0x87C38F);
        snprintf(string_buffer, 20, "Set Brightness");
        _canvas->drawCenterString(string_buffer, _canvas->width() / 2, 5);

        _canvas->setTextSize(5);
        _canvas->setTextColor((uint32_t)0x07430F);
        snprintf(string_buffer, 20, "%d", brightness);
        _canvas->drawCenterString(string_buffer, _canvas->width() / 2, 55);

        _canvas_update();

        if (_check_encoder())
        {
            if (_enc_pos > old_position)
            {
                brightness += 5;

                printf("add\n");
            }
            else
            {
                brightness -= 5;

                printf("min\n");
            }

            if (brightness > 255)
            {

                brightness = 255;

                printf("hit top\n");
            }
            else if (brightness < 0)
            {
                brightness = 0;

                printf("hit bottom\n");
            }

            old_position = _enc_pos;
            _disp->setBrightness(brightness);
        }

        if (_check_next())
        {
            break;
        }
    }

    printf("quit set brightness\n");
}


==================== FILE: src/factory_test/components/ft_io_test.cpp ====================

/**
 * @file io_test.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-07
 *
 * @copyright Copyright (c) 2023
 *
 */
#include "../factory_test.h"

void FactoryTest::_io_test()
{
    printf("io test\n");

    /* Display */
    _canvas->fillScreen(TFT_BLACK);
    _canvas->setFont(&fonts::efontCN_24);
    _canvas->setTextSize(1);
    _canvas->setTextColor(TFT_YELLOW, TFT_BLACK);

    uint32_t time_count = 0;
    bool grove1_pass = false;
    bool grove2_pass = false;

    while (1)
    {

        if ((millis() - time_count) > 400)
        {

            _canvas->fillScreen(TFT_BLACK);
            _canvas->setCursor(0, 0);
            _canvas->setTextColor(TFT_YELLOW, TFT_BLACK);
            _canvas->printf(" [IO测试]\n");
            _canvas->setTextColor(TFT_WHITE);

            float v_bat = (float)analogReadMilliVolts(10) * 2 / 1000;

            _canvas->setCursor(0, 20);
            _canvas->setTextColor((v_bat < 3) ? TFT_RED : TFT_GREEN, TFT_BLACK);
            _canvas->printf("   电池: %.2fV\n", v_bat);

            // if (grove1_pass && grove2_pass) {
            //     time_count = millis();
            //     continue;
            // }

            _canvas->setTextColor(TFT_YELLOW, TFT_BLACK);
            _canvas->printf(" [Grove 1]\n");

            byte error, address;
            uint8_t addr = 0x00;
            Wire1.end();
            Wire1.begin(2, 1, 100000);
            for (address = 0x01; address < 0x7f; address++)
            {
                Wire1.beginTransmission(address);
                error = Wire1.endTransmission();
                if (error == 0)
                {
                    // Serial.printf("I2C device found at address 0x%02X\n", address);

                    addr = address;
                    printf("fonud 0x%02X\n", addr);
                    grove1_pass = true;
                    break;
                }
            }

            if (addr)
            {
                _canvas->setTextColor(TFT_GREEN, TFT_BLACK);
                _canvas->printf("   检测到: 0x%02X\n", addr);
            }
            else
            {
                _canvas->setTextColor(TFT_RED, TFT_BLACK);
                _canvas->printf("   无      \n");
            }

            _canvas->setTextColor(TFT_YELLOW, TFT_BLACK);
            _canvas->printf(" [Grove 2]\n");

            // byte error, address;
            addr = 0x00;
            Wire1.end();
            Wire1.begin(13, 15, 100000);
            for (address = 0x01; address < 0x7f; address++)
            {
                Wire1.beginTransmission(address);
                error = Wire1.endTransmission();
                if (error == 0)
                {
                    // Serial.printf("I2C device found at address 0x%02X\n", address);

                    addr = address;
                    printf("fonud 0x%02X\n", addr);
                    grove2_pass = true;
                    break;
                }
            }

            if (addr)
            {
                _canvas->setTextColor(TFT_GREEN, TFT_BLACK);
                _canvas->printf("   检测到: 0x%02X\n", addr);
            }
            else
            {
                _canvas->setTextColor(TFT_RED, TFT_BLACK);
                _canvas->printf("   无      \n");
            }

            _canvas_update();

            time_count = millis();
        }

        _check_encoder();
        if (_check_next())
        {
            break;
        }
    }

    printf("quit io test\n");
}

void FactoryTest::_io_test_user()
{
    printf("io test user\n");
    _canvas->setFont(&fonts::Font0);
    _canvas->fillRect(0, 0, 240, 135, _canvas->color565(0, 0, 0));

    char string_buffer[24];
    uint32_t time_count = 0;
    while (1)
    {
        if (millis() - time_count > 200)
        {
            _canvas->clear();

            _canvas->fillRect(0, 0, 240, 25, _canvas->color565(20, 20, 20));
            _canvas->setTextSize(2);
            _canvas->setTextColor(TFT_WHITE);
            snprintf(string_buffer, 20, "Bat Voltage");
            _canvas->drawCenterString(string_buffer, _canvas->width() / 2, 5);

            float v_bat = (float)analogReadMilliVolts(10) * 2 / 1000;

            _canvas->setTextSize(5);
            _canvas->setTextColor(TFT_SKYBLUE);
            snprintf(string_buffer, 20, "%.2fV", v_bat);
            _canvas->drawCenterString(string_buffer, _canvas->width() / 2, 55);

            _canvas_update();

            time_count = millis();
        }

        if (_check_next())
        {
            break;
        }
    }
}


==================== FILE: src/factory_test/components/ft_key_test.cpp ====================

/**
 * @file key_test.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-06
 *
 * @copyright Copyright (c) 2023
 *
 */
#include "../factory_test.h"

void FactoryTest::_power_on()
{
    /* Hold pwr pin */
    gpio_reset_pin((gpio_num_t)POWER_HOLD_PIN);
    pinMode(POWER_HOLD_PIN, OUTPUT);
    digitalWrite(POWER_HOLD_PIN, HIGH);
}

void FactoryTest::_power_off()
{
    _rtc.clearIRQ();
    _rtc.disableIRQ();

    _disp->fillScreen(TFT_BLACK);

    while ((!_btn_pwr.read()))
    {
        delay(100);
    }

    delay(200);

    printf("power off\n");
    digitalWrite(POWER_HOLD_PIN, 0);
    delay(10000);

    while (1)
    {
        delay(1000);
    }
}

void FactoryTest::_get_test_mode()
{
    _canvas->fillScreen(TFT_BLACK);
    _canvas->setFont(&fonts::Font0);
    _canvas->setTextColor(TFT_YELLOW, TFT_BLACK);
    _canvas->setTextSize(3);
    _canvas->setCursor(0, 40);
    _canvas->printf(" Factory Test\n");
    // _canvas->setTextSize(2);
    // _canvas->setCursor(0, 60);
    // _canvas->printf(" Release Button to start ");
    _canvas_update();

    /* Check if is test mode */
    _is_test_mode = false;

    uint16_t time_count = 0;
    while (!_btn_pwr.read())
    {
        time_count++;
        delay(10);

        if (time_count == 200)
        {
            printf("test mode\n");
            _is_test_mode = true;
            _tone(5000, 50);
            delay(100);
            _tone(5000, 50);
        }
    }

    delay(200);

    // _disp->fillScreen(TFT_RED);
    // while (1) {
    //     // _wait_next();

    //     _check_next();
    //     _check_encoder();
    // }
}

bool FactoryTest::_check_test_mode()
{
    _is_test_mode = false;
    int hold_time_count = 0;
    const int update_interval = 20;
    
    while (!_btn_pwr.read())
    {
        // If hold long enough
        delay(update_interval);
        hold_time_count += update_interval;
        if (hold_time_count > 800)
            _is_test_mode = true;

        if (_is_test_mode)
        {
            _tone(5000, 50);
            delay(100);
            _tone(5000, 50);

            _canvas->fillScreen(TFT_BLACK);
            _canvas->setTextColor(TFT_YELLOW);
            _canvas->setTextSize(1);
            _canvas->setFont(&fonts::efontCN_24);
            _canvas->setCursor(0, 10);
            _canvas->printf("[DinMeter] 测试固件\n%s (%s)\n\n松开按键进入测试模式", FW_VERISON, __DATE__);
            _canvas_update();

            while (!_btn_pwr.read())
            {
                delay(10);
            }
            return _is_test_mode;
        }
    }
    return false;
}

void FactoryTest::_key_init()
{
    _btn_pwr.begin();

    // while (1) {
    //     _wait_next();
    // }

    // while (1) {
    //     static int pos = 0;
    //     _encoder.tick();

    //     int newPos = _encoder.getPosition();
    //     if (pos != newPos) {
    //         printf("%d  %d\n", newPos, _encoder.getDirection());
    //         pos = newPos;
    //     }
    // }
}

void FactoryTest::_key_test() {}

void FactoryTest::_check_reboot() {}

// bool FactoryTest::_check_next(bool checkPowerOff)
// {
//     /* Double click */
//     if (_btn_pwr.pressed()) {
//         _tone(2500, 50);

//         for (int i = 0; i < 4; i++) {
//             delay(50);
//             if (_btn_pwr.pressed()) {
//                 _tone(2500, 50);
//                 printf("double\n");
//                 if (checkPowerOff) {
//                     _power_off();
//                 }
//             }
//         }

//         printf("not double\n");
//         return true;
//     }

//     return false;
// }

bool FactoryTest::_check_next(bool checkPowerOff)
{
    /* Long press power off */
    if (!_btn_pwr.read())
    {
        _tone(2500, 50);

        uint8_t time_count = 0;
        while (!_btn_pwr.read())
        {

            time_count++;
            if (time_count > 100)
            {
                _canvas->fillScreen(TFT_BLACK);
                _canvas->setFont(&fonts::Font0);
                _canvas->setTextColor(TFT_RED);
                _canvas->setTextSize(2);
                _canvas->drawCenterString("Release Button", _canvas->width() / 2, _canvas->height() / 2 - 20);
                _canvas->drawCenterString("To Power Off", _canvas->width() / 2, _canvas->height() / 2);
                _canvas_update();

                while (!_btn_pwr.read())
                {
                    delay(10);
                }
                _power_off();
            }

            delay(10);
        }

        printf("not long pressed\n");
        return true;
    }

    return false;
}

void FactoryTest::_wait_next()
{
    while (!_check_next())
    {
        _check_encoder();
        _check_reboot();
        delay(10);
    }
    printf("go next\n");
}

bool FactoryTest::_check_encoder(bool playBuzz)
{
    // _enc.tick();
    // delay(100);
    // printf("%d\n", _enc.getPosition());

    if (_enc_pos != _enc.getPosition())
    {
        /* Bi */
        if (playBuzz)
        {
            _noTone();
            // _tone(((_enc.getDirection() == RotaryEncoder::Direction::CLOCKWISE) ? 3000 : 3500), 20);
            _tone(((_enc.getPosition() > _enc_pos) ? 3000 : 3500), 20);
            // delay(20);
        }

        _enc_pos = _enc.getPosition();
        // printf("%d\n", _enc_pos);

        return true;
    }

    return false;
}

void FactoryTest::_encoder_test()
{
    printf("encoder test\n");

    /* Display */
    _canvas->fillScreen(TFT_DARKGREY);
    _canvas->setFont(&fonts::efontCN_24);
    _canvas->setTextSize(1);
    _canvas->setTextColor(TFT_YELLOW, TFT_DARKGREY);

    _canvas->setCursor(0, 0);
    _canvas->printf(" [编码器测试]\n");
    _canvas->setTextColor(TFT_WHITE);
    _canvas->printf(" 转到左边数字\n 然后按下按钮\n");

    _canvas->setTextSize(1.5);

    _enc_pos = 0;
    _enc.setPosition(_enc_pos);

    int8_t target_num_list[] = {-2, -10, 6, 15};

    for (int i = 0; i < 4; i++)
    {
        while (1)
        {
            _check_encoder();

            // Clear previous text area before redrawing
            int textY = 90;
            _canvas->fillRect(0, textY, _canvas->width(), 60, TFT_DARKGREY);
            _canvas->setCursor(0, textY);
            _canvas->printf(" > %d    ", target_num_list[i]);
            _canvas->setTextColor(((target_num_list[i] == _enc_pos) ? TFT_GREEN : TFT_RED), TFT_DARKGREY);
            _canvas->printf("%d    ", _enc_pos);

            if (_check_next())
            {
                if (target_num_list[i] == _enc_pos)
                {
                    break;
                }
            }

            _canvas_update();
        }
    }

    printf("quit encoder test\n");
}

void FactoryTest::_encoder_test_new()
{
    printf("encoder test\n");

    /* Display */
    _canvas->fillScreen(TFT_DARKGREY);
    _canvas->setFont(&fonts::efontCN_24);
    _canvas->setTextSize(1);
    _canvas->setTextColor(TFT_YELLOW, TFT_DARKGREY);
    
    _canvas->setCursor(0, 0);
    _canvas->printf(" [编码器测试]\n");
    _canvas->setTextColor(TFT_WHITE);
    _canvas->printf(" 转到左边数字\n");
    _canvas->setTextSize(1.5);

    _enc_pos = 0;
    _enc.setPosition(_enc_pos);

    int8_t target_num_list[] = {-6, 6};

    for (int i = 0; i < 2; i++)
    {
        while (1)
        {
            _check_encoder();

            // Clear previous text area before redrawing
            int textY = 90;
            _canvas->fillRect(0, textY, _canvas->width(), 60, TFT_DARKGREY);
            _canvas->setCursor(0, textY);
            _canvas->printf(" > %d    ", target_num_list[i]);
            _canvas->setTextColor(((abs(_enc_pos) >= 6) ? TFT_GREEN : TFT_RED), TFT_DARKGREY);
            _canvas->printf("%d    ", _enc_pos);

            if (abs(_enc_pos) >= 6)
            {
                _enc_pos = 0;
                _enc.setPosition(_enc_pos);
                break;
            }

            _canvas_update();
        }
    }

    printf("quit encoder test\n");
}

void FactoryTest::_encoder_test_user()
{
    printf("encoder test\n");

    _canvas->setFont(&fonts::Font0);

    char string_buffer[20];

    _enc_pos = 0;
    _enc.setPosition(_enc_pos);

    while (1)
    {
        _canvas->fillScreen(TFT_DARKGREY);

        // Header bar now on the left side
        _canvas->fillRect(0, 0, 25, _canvas->height(), (uint32_t)0x163820);
        _canvas->setTextSize(2);
        _canvas->setTextColor((uint32_t)0x6AB8A0);
        snprintf(string_buffer, 20, "Encoder Test");
        
        // Draw the header text (no need to set rotation as it's now set globally)
        _canvas->drawCenterString(string_buffer, _canvas->height() / 2, 5);

        // Adjust the encoder value position for the rotated layout
        _canvas->setTextSize(5);
        _canvas->setTextColor((uint32_t)0x163820);
        snprintf(string_buffer, 20, "%d", _enc_pos);
        _canvas->drawCenterString(string_buffer, (_canvas->width() + 25) / 2, _canvas->height() / 2);

        _canvas_update();

        _check_encoder();
        if (_check_next())
        {
            break;
        }
    }

    printf("quit encoder test\n");
}


==================== FILE: src/factory_test/components/ft_rtc_test.cpp ====================

/**
 * @file rtc_test.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-07
 *
 * @copyright Copyright (c) 2023
 *
 */
#include "../factory_test.h"

void FactoryTest::_rtc_init()
{
    Wire.begin(11, 12, 100000);

    _rtc.begin();
    _rtc.clearIRQ();
    _rtc.disableIRQ();
}

void FactoryTest::_rtc_test()
{
    printf("rtc test\n");

    _canvas->setFont(&fonts::Font0);

    // _canvas->fillRect(0, 0, 240, 135, _canvas->color565(0, 0, 0));
    // _canvas->fillScreen(0xC9C9EE);

    // Displaybuff();
    I2C_BM8563_TimeTypeDef time;
    _rtc.getTime(&time);

    // _canvas->setTextSize(4);
    // _canvas->setCursor(6, 25);
    // _canvas->setTextColor(TFT_WHITE);

    uint32_t time_count = millis();

    while (1)
    {
        if ((millis() - time_count) > 500)
        {
            _rtc.getTime(&time);

            _canvas->fillScreen((uint32_t)0xC9C9EE);
            _canvas->setTextSize(4);
            _canvas->setTextColor((uint32_t)0x49496E);
            _canvas->setCursor(25, 55);
            _canvas->printf("%02d:%02d:%02d", time.hours, time.minutes, time.seconds);
            _canvas->fillRect(0, 0, 240, 25, (uint32_t)0x49496E);
            _canvas->setTextSize(2);
            _canvas->setTextColor((uint32_t)0xC9C9EE);
            _canvas->drawCenterString("RTC Time", _canvas->width() / 2, 5);
            // _canvas->drawString("BMP8563 RTC Time", 26, 5, 1);

            if (_is_test_mode)
            {
                _canvas->setFont(&fonts::efontCN_24);
                _canvas->setTextColor(TFT_YELLOW, TFT_BLACK);
                _canvas->setTextSize(1);
                _canvas->setCursor(0, 100);
                _canvas->printf(" 确保数值正常且变化");
                _canvas->setFont(&fonts::Font0);
            }

            _canvas_update();

            time_count = millis();
        }

        // delay(10);
        _check_encoder();
        if (_check_next())
        {
            break;
        }
    }

    printf("quit rtc test\n");
}

void FactoryTest::_rtc_wakeup_test()
{
    _canvas->fillScreen(TFT_BLACK);
    _canvas->setCursor(0, 10);
    _canvas->setFont(&fonts::efontCN_24);
    _canvas->setTextColor(TFT_YELLOW);
    _canvas->setTextSize(1);
    _canvas->printf(" [RTC 唤醒测试]\n - 请移除电源 -\n\n 按下按键[关机]\n 数秒后将自动启动");
    _canvas_update();

    _wait_next();

    _rtc.clearIRQ();
    _rtc.SetAlarmIRQ(4);
    _canvas->fillScreen(TFT_BLACK);
    _canvas_update();
    delay(500);
    // power_off();

    digitalWrite(POWER_HOLD_PIN, 0);

    while (1)
    {
        printf("%d\n", _btn_pwr.read());
        delay(50);
    }
}

void FactoryTest::_rtc_wakeup_test_user()
{
    printf("rtc wakeup test\n");
    _canvas->setFont(&fonts::Font0);
    // _canvas->fillRect(0, 0, 240, 135, _canvas->color565(0, 0, 0));
    _canvas->fillScreen((uint32_t)0xC6D5EF);

    _enc.setPosition(5);
    _enc_pos = 5;

    // Choose wake up time
    char string_buffer[24];
    while (1)
    {
        // _canvas->clear();
        _canvas->fillScreen((uint32_t)0xC6D5EF);

        _canvas->fillRect(0, 0, 240, 25, (uint32_t)0x46556F);
        _canvas->setTextSize(2);
        _canvas->setTextColor((uint32_t)0xC6D5EF);
        snprintf(string_buffer, 20, "Sleep & Wake Up");
        _canvas->drawCenterString(string_buffer, _canvas->width() / 2, 5);

        _canvas->setTextColor((uint32_t)0x46556F);
        _canvas->setCursor(0, 30);
        _canvas->printf(" Press Button Sleep\n Wake Up In:");

        _canvas->setTextSize(5);
        _canvas->setTextColor((uint32_t)0x46556F);
        snprintf(string_buffer, 20, "%ds", _enc_pos);
        _canvas->drawCenterString(string_buffer, _canvas->width() / 2, 85);

        _canvas_update();

        _check_encoder();

        // Limit
        if (_enc.getPosition() > 20)
            _enc.setPosition(20);
        if (_enc.getPosition() < 5)
            _enc.setPosition(5);

        if (_check_next())
            break;
    }

    // Go
    printf("sleep %ds\n", _enc.getPosition());
    _rtc.clearIRQ();
    _rtc.SetAlarmIRQ(_enc.getPosition());
    _canvas->fillScreen(TFT_BLACK);
    _canvas_update();
    delay(500);
    // power_off();

    digitalWrite(POWER_HOLD_PIN, 0);

    while (1)
    {
        printf("%d\n", _btn_pwr.read());
        delay(50);
    }
}


==================== FILE: src/factory_test/components/ft_wifi_test.cpp ====================

/**
 * @file wifi_test.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-07
 *
 * @copyright Copyright (c) 2023
 *
 */
#include "../factory_test.h"

static bool wifi_test_done = false;
static int wifi_test_RSSI = 0;
static String wifi_test_result = "null";
static int wifi_best_RSSI = 0;
static int scan_num = 0;

#define WIFI_PASS_RSSI_TH -65
#define WIFI_TEST_IS_PASS() wifi_test_result == "ok"

const char* wifi_ssid = "UDUDLRLRBABA";
const char* wifi_password = "114514";

void task_wifi(void* param)
{
    // Set WiFi to station mode and disconnect from an AP if it was previously connected.
    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    delay(100);

    /* ------------------------------------- Scan test ------------------------------------- */
    /* Wifi scan and RSSI test */
    wifi_test_result = "null";
    wifi_best_RSSI = 0;

    printf("Wifi scan start\n");
    int n = WiFi.scanNetworks();
    scan_num = n;
    if (n == 0)
    {
        wifi_test_result = "Scan error";
    }
    else
    {
        /* Reset test rssi */
        wifi_best_RSSI = WiFi.RSSI(0);
        for (int i = 0; i < n; ++i)
        {
            /* Get max rssi */
            if (WiFi.RSSI(i) > wifi_best_RSSI)
                wifi_best_RSSI = WiFi.RSSI(i);
        }
        /* If not pass */
        printf("Best RSSI: %d\n", wifi_best_RSSI);
        if (wifi_best_RSSI < WIFI_PASS_RSSI_TH)
        {
            printf("Low RSSI\n");
            wifi_test_result = "Low RSSI: ";
            wifi_test_result += wifi_best_RSSI;
        }
    }
    // Delete the scan result to free memory for code below.
    WiFi.scanDelete();

    if (wifi_test_result != "null")
    {
        delay(1000);
        wifi_test_done = true;
        vTaskDelete(NULL);
    }

    /* ------------------------------------- Scan test ------------------------------------- */

    /* ------------------------------------- Connectoin test ------------------------------------- */
    WiFi.begin(wifi_ssid, wifi_password);

    /* Wait for the connection */
    uint32_t time_conut = millis();
    printf("Connecting to %s\n", wifi_ssid);
    while (WiFi.status() != WL_CONNECTED)
    {
        delay(1000);
        printf("...\n");
        /* If time out */
        if ((millis() - time_conut) > 10000)
        {
            wifi_test_result = "Connect wifi timeout";
            break;
        }
    }
    /* If connected */
    if (wifi_test_result == "null")
    {

        /* Setup http client */
        HTTPClient http;

        printf("[HTTP] begin...\n");

        // configure traged server and url
        http.begin("http://example.com/index.html");

        // start connection and send HTTP header
        int httpCode = http.GET();
        // httpCode will be negative on error
        if (httpCode > 0)
        {
            // HTTP header has been send and Server response header has been handled
            printf("[HTTP] GET... code: %d\n", httpCode);

            // file found at server
            if (httpCode == HTTP_CODE_OK)
            {
                String payload = http.getString();
                printf(payload.c_str());

                printf("\n[HTTP] HTTP test pass\n");
                wifi_test_result = "ok";
            }
            else
            {
                printf("[HTTP] HTTP code not ok\n");
                wifi_test_result = "Http error";
            }
        }
        else
        {
            printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());

            wifi_test_result = "Http get failed";
        }

        // http.end();
        // http.~HTTPClient();
    }
    else
    {
        WiFi.disconnect(true);

        wifi_test_done = true;
        // delay(1000);
        vTaskDelete(NULL);
    }

    // wifi_test_result = "ok";

    // WiFi.mode(WIFI_OFF);
    // WiFi.disconnect(true);

    esp_wifi_disconnect();
    esp_wifi_stop();
    esp_wifi_deinit();
    esp_wifi_clear_ap_list();

    /* ------------------------------------- Connectoin test ------------------------------------- */

    wifi_test_done = true;
    // delay(1000);
    vTaskDelete(NULL);
}

void FactoryTest::_wifi_start_test_task()
{

    /* Craete task */
    printf("wifi task init\n");
    TaskHandle_t _task_wifi_handler = NULL;
    xTaskCreate(task_wifi, "wifi", 4096, NULL, 5, &_task_wifi_handler);
    if (_task_wifi_handler == NULL)
    {
        printf("wifi task create failed\n");
        return;
    }
    printf("wait result\n");
}

void FactoryTest::_wifi_test()
{
    printf("wifi test\n");

    if (_is_test_mode)
    {
        // /* Craete task */
        // printf("wifi task init\n");
        // TaskHandle_t _task_wifi_handler = NULL;
        // xTaskCreate(task_wifi, "wifi", 4096, NULL, 5, &_task_wifi_handler);
        // if (_task_wifi_handler == NULL) {
        //     printf("wifi task create failed\n");
        //     return;
        // }
        // printf("wait result\n");

        /* Display */
        _canvas->fillScreen(TFT_BLACK);
        _canvas->setFont(&fonts::efontCN_24);
        _canvas->setTextSize(1);
        _canvas->setTextColor(TFT_WHITE, TFT_BLACK);

        while (1)
        {
            _canvas->fillScreen(TFT_BLACK);

            if (wifi_test_done)
            {
                _canvas->setCursor(0, 10);
                _canvas->setFont(&fonts::Font0);
                _canvas->printf(" %s\n %s\n", wifi_ssid, wifi_password);
                _canvas->setFont(&fonts::efontCN_24);

                _canvas->setTextColor(TFT_YELLOW, TFT_BLACK);
                _canvas->printf(" [Wifi测试]\n");

                _canvas->setTextColor((wifi_test_result == "ok") ? TFT_GREEN : TFT_RED);
                _canvas->printf(" 扫描个数: %d\n 结果: %s\n", scan_num, wifi_test_result.c_str());

                _canvas_update();

                _check_encoder();
                if (_check_next())
                {
                    break;
                }
            }

            else
            {
                _canvas->setCursor(0, 10);
                _canvas->setFont(&fonts::Font0);
                _canvas->printf(" %s\n %s\n", wifi_ssid, wifi_password);
                _canvas->setFont(&fonts::efontCN_24);

                _canvas->setTextColor(TFT_YELLOW, TFT_BLACK);
                _canvas->printf(" [Wifi测试]\n");

                _canvas->setTextColor(TFT_BLUE, TFT_BLACK);
                _canvas->printf(" 等待测试结果...\n");
            }

            _canvas_update();
            delay(200);
        }
    }

    else
    {
        printf("wifi scan\n");

        _canvas->fillScreen((uint32_t)0xF6A4A4);
        _canvas->setFont(&fonts::Font0);
        _canvas->setTextSize(2);
        // _canvas->setTextSize(1);
        _canvas->setTextColor((uint32_t)0xF6A4A4);
        _canvas->setCursor(0, 6);
        _canvas->fillRect(0, 0, 240, 25, (uint32_t)0x762424);
        _canvas->printf("      WiFi Scan\n");

        _canvas->setFont(&fonts::efontCN_16_b);
        _canvas->setTextScroll(false);
        _canvas->setTextSize(1);
        _canvas->setCursor(0, 28);
        _canvas->setTextColor((uint32_t)0x762424);
        _canvas->printf(" Scanning...\n");
        _canvas_update();
        _canvas->setCursor(0, 28);

        int wifi_num = 0;
        // if (!_wifi_tested)
        {
            // _wifi_tested = true;

            // Set WiFi to station mode and disconnect from an AP if it was previously connected.
            WiFi.mode(WIFI_STA);
            WiFi.disconnect();
            delay(100);

            /* ------------------------------------- Scan test ------------------------------------- */
            printf("Wifi scan start\n");
            int n = WiFi.scanNetworks();
            wifi_num = n;
            if (n == 0)
            {
                printf("scan error\n");
            }
            else
            {
                for (int i = 0; i < 6; ++i)
                {
                    // display->setTextColor((WiFi.RSSI(i) > -75) ? TFT_GREEN : TFT_RED, TFT_BLACK);
                    // display->printf(" %s ", WiFi.SSID(i).c_str());
                    // display->printf(" %d\n", WiFi.RSSI(i));
                    // displayUpdate();

                    _wifi_list[i].rssi = WiFi.RSSI(i);
                    _wifi_list[i].ssid = WiFi.SSID(i);

                    switch (WiFi.encryptionType(i))
                    {
                    case WIFI_AUTH_OPEN:
                        _wifi_list[i].ssid += " (open)";
                        break;
                    case WIFI_AUTH_WEP:
                        _wifi_list[i].ssid += " (WEP)";
                        break;
                    case WIFI_AUTH_WPA_PSK:
                        _wifi_list[i].ssid += " (WPA)";
                        break;
                    case WIFI_AUTH_WPA2_PSK:
                        _wifi_list[i].ssid += " (WPA2)";
                        break;
                    case WIFI_AUTH_WPA_WPA2_PSK:
                        _wifi_list[i].ssid += " (WPA+WPA2)";
                        break;
                    case WIFI_AUTH_WPA2_ENTERPRISE:
                        _wifi_list[i].ssid += " (WPA2-EAP)";
                        break;
                    case WIFI_AUTH_WPA3_PSK:
                        _wifi_list[i].ssid += " (WPA3)";
                        break;
                    case WIFI_AUTH_WPA2_WPA3_PSK:
                        _wifi_list[i].ssid += " (WPA2+WPA3)";
                        break;
                    case WIFI_AUTH_WAPI_PSK:
                        _wifi_list[i].ssid += " (WAPI)";
                        break;
                    default:
                        break;
                    }
                }
            }
            // Delete the scan result to free memory for code below.
            WiFi.scanDelete();

            WiFi.disconnect(true);
            esp_wifi_disconnect();
            esp_wifi_stop();
            esp_wifi_deinit();
            esp_wifi_clear_ap_list();
        }

        /* Display result */
        if (wifi_num > 6)
            wifi_num = 6;
        for (int i = 0; i < wifi_num; ++i)
        {
            _canvas->setTextColor((_wifi_list[i].rssi > -75) ? TFT_DARKGREEN : TFT_BROWN, (uint32_t)0xF6A4A4);

            _canvas->printf("%d", _wifi_list[i].rssi);
            _canvas->printf(" %s\n", _wifi_list[i].ssid.c_str());
            _canvas_update();

            // _wifi_list[i].rssi = WiFi.RSSI(i);
            // _wifi_list[i].ssid = WiFi.SSID(i);
        }

        while (1)
        {
            _check_encoder();
            if (_check_next())
            {
                break;
            }
            // delay(10);
        }
    }

    printf("quit wifi test\n");
}


==================== FILE: src/factory_test/factory_test.cpp ====================

/**
 * @file factory_test.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-06
 *
 * @copyright Copyright (c) 2023
 *
 */
#include "factory_test.h"

void FactoryTest::init()
{
    _power_on();

    _rtc_init();

    _key_init();

    _disp_init();

    // Encoder init
    _enc.attachHalfQuad(40, 41);

    _enc.setCount(0);

    // if (_check_test_mode())
    // {
    //     start_factory_test();
    // }
}

void FactoryTest::start_factory_test()
{
    _wifi_start_test_task();
    _disp_test();
    _rtc_test();
    _encoder_test_new();
    _io_test();
    _wifi_test();
    _ble_test();
    _rtc_wakeup_test();
}


==================== FILE: src/factory_test/factory_test.h ====================

/**
 * @file factory_test.h
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-06
 *
 * @copyright Copyright (c) 2023
 *
 */
#pragma once
#include <Arduino.h>
#include <Button.h>
#include <I2C_BM8563.h>
#include <LovyanGFX.h>
#include <ESP32Encoder.h>

#include <BLE2902.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>

#include <HTTPClient.h>
#include <WiFi.h>
#include <esp_wifi.h>

#define FW_VERISON "v0.1"
#define BUZZ_PIN 3
#define POWER_HOLD_PIN 46

struct WiFiList_t
{
    String ssid = "";
    int8_t rssi = 0;
};

class FactoryTest
{
public:
    bool _is_test_mode;

    /* System */
    inline void _stuck_forever()
    {
        while (1)
        {
            delay(100);
        }
    }
    void _power_on();
    void _power_off();
    void _get_test_mode();
    bool _check_test_mode();

    /* Display */
    LGFX_Device* _disp;
    LGFX_Sprite* _canvas;
    inline void _canvas_update() { _canvas->pushSprite(0, 0); }
    void _disp_init();
    void _disp_test();
    void _disp_set_brightness();

    /* Button */
    Button _btn_pwr = Button(42, 20);
    void _key_init();
    void _key_test();
    void _check_reboot();
    bool _check_next(bool checkPowerOff = true);
    void _wait_next();

    /* Encoder */
    // RotaryEncoder _enc = RotaryEncoder(40, 41, RotaryEncoder::LatchMode::TWO03);
    ESP32Encoder _enc;
    int _enc_pos;
    bool _check_encoder(bool playBuzz = true);
    void _encoder_test();
    void _encoder_test_new();
    void _encoder_test_user();

    /* Buzzer */
    inline void _tone(unsigned int frequency, unsigned long duration = 0UL) { tone(BUZZ_PIN, frequency, duration); }
    inline void _noTone() { noTone(BUZZ_PIN); }

    /* RTC */
    I2C_BM8563 _rtc;
    void _rtc_init();
    void _rtc_test();
    void _rtc_wakeup_test();
    void _rtc_wakeup_test_user();

    /* Wifi */
    WiFiList_t _wifi_list[13];
    bool _wifi_tested;
    void _wifi_start_test_task();
    void _wifi_test();

    /* BLE */
    bool _is_ble_inited;
    void _ble_test();

    /* IO */
    void _io_test();
    void _io_test_user();

    /* Arkanoid */
    void _arkanoid_start();
    void _arkanoid_setup();
    void _arkanoid_loop();
    void _InitGame(void);        // Initialize game
    void _UpdateGame(void);      // Update game (one frame)
    void _DrawGame(void);        // Draw game (one frame)
    void _UnloadGame(void);      // Unload game
    void _UpdateDrawFrame(void); // Update and Draw (one frame)

public:
    FactoryTest()
        : _is_test_mode(false), _disp(nullptr), _canvas(nullptr), _enc_pos(0), _wifi_tested(false), _is_ble_inited(false)
    {
    }
    ~FactoryTest() = default;

    void init();
    void start_factory_test();
};


==================== FILE: src/main.cpp ====================

/**
 * @file main.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2023-06-06
 *
 * @copyright Copyright (c) 2023
 *
 */
#include "factory_test/factory_test.h"

static FactoryTest ft;

void view_create(FactoryTest* ft);
void view_update();

void setup()
{
    ft.init();
    view_create(&ft);
}

void loop() { view_update(); }


==================== FILE: src/view/assets/README ====================


This directory is intended store your app's static assets like icons, fonts or any images


==================== FILE: src/view/assets/assets.h ====================

/**
 * @file assets.h
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2024-01-07
 *
 * @copyright Copyright (c) 2024
 *
 */
#pragma once
#include "bat_panel.h"
#include "icon_brightness.h"
#include "icon_display.h"
#include "icon_encoder.h"
#include "icon_game.h"
#include "icon_menu.h"
#include "icon_poweroff.h"
#include "icon_rtc.h"
#include "icon_sleep.h"
#include "icon_wifi.h"

==================== FILE: src/view/assets/bat_panel.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: bat_panel
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_bat_panel[4482] = {
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████████████████████████████████
    0x1aff, 0x1aff, 0x3bff, 0x5bff, 0x7cff, 0x9dff, 0x9dff, 0xbeff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x1aff, 0x3bff, 0x7cff, 0x9dff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x1aff, 0x5bff, 0x7dff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x3bff, 0x7cff, 0xbdff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x3bff, 0x7cff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0x5cff, 0xbdff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0x5cff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0x7cff, 0xdeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x3bff, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0x7cff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0x7cff, 0xdeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x5cff, 0xdeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x7cff, 0xdeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0x7cff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x3bff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x7cff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x3bff, 0xbdff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x7cff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x3bff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd9fe, 0x7cff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x5bff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x3bff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xfafe, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xfafe, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xfafe, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x3bff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x5bff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x7cff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0xdeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x5bff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0xdeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x5cff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xf9fe, 0xbeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x3bff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x9dff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x3bff, 0xffff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x9dff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x3bff, 0xffff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd9fe, 0xbeff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x5cff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x1aff, 0xffff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x9dff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x5bff, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xfafe, 0xffff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xbeff, 
    0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0xd8fe, 0x7cff
};
// const tImage bat_panel = { image_data_bat_panel, 83, 54,
//     16 };



==================== FILE: src/view/assets/icon_brightness.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: icon_brightness
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_icon_brightness[1024] = {
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓∙∙▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓
    // ▓▓▓▓▓▓░∙░▓▓▓▓▓▓▓▓▓▓▓▓▓▓░∙░▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓░░▓▓▓▒░░∙∙░▒▓▓▓▓░░▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▒∙∙∙∙∙∙∙∙▒▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓░∙∙░▒▒▒▒░∙∙░▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▒∙∙▒▒▒▒▒▒▒▒∙∙▒▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓∙∙▒▒▒▒▒▒▒▒▒▒∙∙▒▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▒∙░▒▒▒▒▒▒▒▒▒▒░∙░▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓░∙▒▒▒▒▒▒▒▒▒▒▒▒∙░▓▓▓▓▓▓▓▓
    // ▓▓▓░∙░▓▓∙∙▒▒▒▒▒▒▒▒▒▒▒▒∙∙▓▓░∙░▓▓▓
    // ▓▓▓░∙░▓▓∙∙▒▒▒▒▒▒▒▒▒▒▒▒∙∙▓▓░∙░▓▓▓
    // ▓▓▓▓▓▓▓▓░∙▒▒▒▒▒▒▒▒▒▒▒▒∙░▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓░∙░▒▒▒▒▒▒▒▒▒▒░∙▒▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▒∙∙▒▒▒▒▒▒▒▒▒▒∙∙▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▒∙∙▒▒▒▒▒▒▒▒∙∙▒▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓░∙∙░▒▒▒▒░∙∙░▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▒∙∙∙∙∙∙∙∙▒▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓░░▓▓▓▓▒░∙∙░░▒▓▓▓░░▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓░∙░▓▓▓▓▓▓▓▓▓▓▓▓▓▓░∙░▓▓▓▓▓▓
    // ▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓∙∙▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0102, 0x0102, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x0d65, 0x0523, 0x0523, 0x0102, 0x0102, 0x0523, 0x0944, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0944, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0944, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x0102, 0xe522, 0x6b54, 0x4e6d, 0x4e6d, 0x6b54, 0xa83b, 0x0102, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0944, 0x0102, 0x0102, 0x6b54, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x6b54, 0x0102, 0x0102, 0x0944, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0102, 0x0102, 0x6b54, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x6b54, 0x0102, 0x0102, 0x0d65, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0944, 0x0102, 0xa83b, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0xe522, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x6b54, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x6b54, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x0523, 0x1186, 0x1186, 0x0102, 0x0102, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x0102, 0x0102, 0x1186, 0x1186, 0x0523, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x0523, 0x1186, 0x1186, 0x0102, 0x0102, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x0102, 0x0102, 0x1186, 0x1186, 0x0523, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x6b54, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x6b54, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0xe522, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0xa83b, 0x0102, 0x0944, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0d65, 0x0102, 0x0102, 0x6b54, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x6b54, 0x0102, 0x0102, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0944, 0x0102, 0x0102, 0x6b54, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x4e6d, 0x6b54, 0x0102, 0x0102, 0x0944, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x0102, 0xa83b, 0x6b54, 0x4e6d, 0x4e6d, 0x6b54, 0xe522, 0x0102, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0944, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0102, 0x0944, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x0944, 0x0523, 0x0102, 0x0102, 0x0523, 0x0523, 0x0d65, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0102, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0102, 0x0102, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x0523, 0x0523, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 
    0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186, 0x1186
};
// const tImage icon_brightness = { image_data_icon_brightness, 32, 32,
//     16 };



==================== FILE: src/view/assets/icon_display.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: icon_display
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_icon_display[1024] = {
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████▒░░░░░░░░░░░░░░░░░░░░░░▒████
    // ███▒░░░░░░░░░░░░░░░░░░░░░░░░▒███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███▒░░░░░░░░░░░░░░░░░░░░░░░░▒███
    // ████▒░░░░░░░░░░░░░░░░░░░░░░▒████
    // ████████████████████████████████
    // ████████████████████████████████
    // ███████████▒░░░░░░░░▒███████████
    // ███████████▒░░░░░░░░▒███████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xd37c, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xd37c, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xd37c, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xd37c, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x3485, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x3485, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xcb3a, 0xcb3a, 0x3485, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x179e, 0x3485, 0xcb3a, 0xcb3a, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xd37c, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xd37c, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xd37c, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xd37c, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xcf5b, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcf5b, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xcf5b, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcb3a, 0xcf5b, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 
    0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe, 0xdbbe
};
// const tImage icon_display = { image_data_icon_display, 32, 32,
//     16 };



==================== FILE: src/view/assets/icon_encoder.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: icon_encoder
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_icon_encoder[1024] = {
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▒░░▒▒▒▒▒▒▒▒░░░▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓░∙∙░▒▒▒▒▒▒▒▒░∙∙░▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓░∙∙░▒▒▒▒▒▒▒▒▒▒░∙∙░▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓░∙░▒▒▒▒▒▒▒▒▒▒▒▒▒▒░∙░▓▓▓▓▓▓
    // ▓▓▓▓▓░∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙░▓▓▓▓▓
    // ▓▓▓▓▒∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙▒▓▓▓▓
    // ▓▓▓▓░∙░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░∙░▓▓▓▓
    // ▓▓▓▓∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙▒▓▓▓
    // ▓▓▓░∙░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░∙░▓▓▓
    // ▓▓▓░∙░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙░▓▓▓
    // ▓▓▓░∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙░▓▓▓
    // ▓▓▓∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙▓▓▓
    // ▓▓▓∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙▓▓▓
    // ▓▓▓∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙▓▓▓
    // ▓▓▓░∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░∙░▓▓▓
    // ▓▓▓░∙░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░∙░▓▓▓
    // ▓▓▓▒∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙▒▓▓▓
    // ▓▓▓▓░∙░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░∙░▓▓▓▓
    // ▓▓▓▓▒∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙░▓▓▓▓
    // ▓▓▓▓▓░∙░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒∙∙░▓▓▓▓▓
    // ▓▓▓▓▓▓░∙∙▒▒▒▒▒▒▒▒▒▒▒▒▒▒░∙░▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓░∙∙░▒▒▒▒▒▒▒▒▒▒░∙∙░▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓░∙∙∙░░▒▒▒▒▒░∙∙∙░▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓░░∙∙∙∙∙∙∙∙∙∙░▒▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▒░░∙∙∙∙░░▒▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd054, 0xc82a, 0xa72a, 0x9365, 0x315d, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x315d, 0x5265, 0xc82a, 0xc82a, 0xcc43, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xc411, 0xc411, 0x8722, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x8722, 0xc411, 0xc411, 0xcc43, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xc82a, 0xc411, 0xc411, 0x4a33, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x4a33, 0xc411, 0xc411, 0xc82a, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xc411, 0x8722, 0x2d4c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x2d4c, 0x8722, 0xc411, 0xc82a, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xc411, 0xc411, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x2d4c, 0xc411, 0xc411, 0xcc43, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd054, 0xc411, 0xc411, 0x2d4c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x2d4c, 0xc411, 0xc411, 0xd054, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xc411, 0x4a33, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x4a33, 0xc411, 0xc82a, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xc411, 0xc411, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xc411, 0xc411, 0xd054, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xc411, 0x4a33, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x8722, 0xc411, 0xcc43, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xc411, 0x4a33, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x2d4c, 0xc411, 0xc82a, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xc82a, 0xc411, 0x2d4c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x2d4c, 0xc411, 0xc82a, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xc411, 0xc411, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xc411, 0xc411, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xc411, 0xc411, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xc411, 0xc411, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xc411, 0xc411, 0x2d4c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xc411, 0xc411, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xc82a, 0xc411, 0x2d4c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x4a33, 0xc411, 0xc82a, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xc411, 0x8722, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x4a33, 0xc411, 0xcc43, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd054, 0xc411, 0xc411, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xc411, 0xc411, 0xd054, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xc82a, 0xc411, 0x4a33, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x4a33, 0xc411, 0xcc43, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd054, 0xc411, 0xc411, 0x2d4c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x2d4c, 0xc411, 0xc411, 0xcc43, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xc411, 0x8722, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xc411, 0xc411, 0xcc43, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xc82a, 0xc411, 0xc411, 0x2d4c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x2d4c, 0x8722, 0xc411, 0xc82a, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xc82a, 0xc411, 0xc411, 0x4a33, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0xf05c, 0x4a33, 0xc411, 0xc411, 0xc82a, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xc411, 0xc411, 0xc411, 0x4a33, 0x4a33, 0xf05c, 0xf05c, 0xf05c, 0x2d4c, 0x2d4c, 0x8722, 0xc411, 0xc411, 0xc411, 0xcc43, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xcc43, 0xcc43, 0xc411, 0xc411, 0xc411, 0xc411, 0xc411, 0xc411, 0xc411, 0xc411, 0xc411, 0xc411, 0xc82a, 0xd054, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd054, 0xcc43, 0xc82a, 0xc411, 0xc411, 0xc411, 0xc411, 0xc82a, 0xcc43, 0xd054, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 
    0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d, 0xd46d
};
// const tImage icon_encoder = { image_data_icon_encoder, 32, 32,
//     16 };



==================== FILE: src/view/assets/icon_game.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: icon_game
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_icon_game[1024] = {
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ███████▒▒░░░░░░░░░░░░░░▒▓███████
    // █████▓▒░░░░░░░░░░░░░░░░░░▒▓█████
    // ████▓░░░▒██████████████▓▒░░█████
    // ████▒░▒██████████████████▒░▒████
    // ███▓░▒████████████████████░░▒███
    // ███▒░▓████▒▒██████████████▒░▒███
    // ███░░▓████░░███████████████░░███
    // ██▓░░███▒░░░░▒████▒░░░▒████░░███
    // ██▓░▒███▒░░░░▒████▒░░░▒████░░▒██
    // ██▒░▒█████░░██████████████▓░░▒██
    // ██▒░▓█████▒▒██████████████▒░░▒██
    // ██░░▓████████████████████▒░▒░░██
    // █▓░░███████████████████▒░░░▓░░██
    // █▓░▒████████▒░░░░░░░░░░░░▒▓▓▒░▓█
    // █▒░▒███████▒░░░░░░░░░░░▒▒▓▓▓▒░▒█
    // █▒░▓██████▒░░▓████▒░░▒▓▓▓▓▓▓▒░▒█
    // █▒░▓█████▓░░▒██████▒░░▒▓▓▓▓▓▓░░█
    // █░░█████▓░░▒████████▒░░▓▓▓▓▓▓░░█
    // █░░▒███▓░░▒██████████▒░░▓▓▓▓▓░▒█
    // █▒░░▓█▒▒░▒████████████▒░▒▓▓▒▒░▓█
    // ██▒░░░░░▒██████████████▒░░░░░▒██
    // ███▒▒░▒▒████████████████▒▒░░▒███
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0ab4, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0693, 0x0ed5, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ed5, 0x0693, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0693, 0x0ed5, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ed5, 0x0272, 0x0272, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ed5, 0x0693, 0x0272, 0x0272, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x0ed5, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0272, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0x0ed5, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x0272, 0x0272, 0x0ed5, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0272, 0x0272, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0272, 0x0272, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x0ed5, 0x0272, 0x0272, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0x0272, 0x0272, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0x0272, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0272, 0x0272, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x0ed5, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0x0272, 0x0272, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0x0272, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0272, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0272, 0x0272, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ed5, 0x0272, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x0693, 0x0272, 0x0ed5, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0x0272, 0x0693, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x0272, 0x0272, 0x0ed5, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0xe68a, 0x0272, 0x0272, 0x12f6, 0x12f6, 
    0x12f6, 0x0ed5, 0x0272, 0x0272, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0272, 0x0272, 0x4fdd, 0x0272, 0x0272, 0x12f6, 0x12f6, 
    0x12f6, 0x0ed5, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0xe68a, 0x4fdd, 0x4fdd, 0xe68a, 0x0272, 0x0ed5, 0x12f6, 
    0x12f6, 0x0ab4, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0xa9ab, 0xa9ab, 0x4fdd, 0x4fdd, 0x4fdd, 0xa9ab, 0x0272, 0x0ab4, 0x12f6, 
    0x12f6, 0x0693, 0x0272, 0x0ed5, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0272, 0x0ed5, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0272, 0xa9ab, 0x4fdd, 0x4fdd, 0x4fdd, 0x4fdd, 0x4fdd, 0x4fdd, 0xa9ab, 0x0272, 0x0ab4, 0x12f6, 
    0x12f6, 0x0693, 0x0272, 0x0ed5, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ed5, 0x0272, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0272, 0xa9ab, 0x4fdd, 0x4fdd, 0x4fdd, 0x4fdd, 0x4fdd, 0x6cc4, 0x0272, 0x0272, 0x12f6, 
    0x12f6, 0x0272, 0x0272, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ed5, 0x0272, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0272, 0x6cc4, 0x4fdd, 0x4fdd, 0x4fdd, 0x4fdd, 0x4fdd, 0x0272, 0x0272, 0x12f6, 
    0x12f6, 0x0272, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 0x0ed5, 0x0272, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0x0272, 0x6cc4, 0x4fdd, 0x4fdd, 0x4fdd, 0x6cc4, 0x0272, 0x0693, 0x12f6, 
    0x12f6, 0x0ab4, 0x0272, 0x0272, 0x0ed5, 0x12f6, 0x0ab4, 0x0693, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0272, 0xe68a, 0x6cc4, 0x4fdd, 0xa9ab, 0xe68a, 0x0272, 0x0ed5, 0x12f6, 
    0x12f6, 0x12f6, 0x0693, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0693, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0693, 0x0272, 0x0272, 0x0272, 0x0272, 0x0272, 0x0693, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0693, 0x0272, 0x0693, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x0ab4, 0x0693, 0x0272, 0x0272, 0x0ab4, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 
    0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6, 0x12f6
};
// const tImage icon_game = { image_data_icon_game, 32, 32,
//     16 };



==================== FILE: src/view/assets/icon_menu.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: icon_menu
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_icon_menu[1024] = {
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▒░░░░░░▒▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓░░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▒░░░░▒▒▓▓▓▒▒░░░▒▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓░░░▒▓▓▓▓▓▓▓▓▓▓▒░░░▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓░░░▒▓▓▓▓▓▓▓▓▓▓▓▓▒░░░▓▓▓▓▓▓
    // ▓▓▓▓▓▒░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒▓▓▓▓▓
    // ▓▓▓▓▒░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓▓▓▓▓
    // ▓▓▓▓▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓▓▓▓
    // ▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓
    // ▓▓▓▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒▓▓▓
    // ▓▓▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓▓▓
    // ▓▓▓░░▓▓▓▓▒▒▓▓▓▓▒▒▓▓▓▒▒▓▓▓▓▒░░▓▓▓
    // ▓▓▓░░▓▓▓▓░░░▓▓▒░░▒▓▓░░░▓▓▓▓░░▓▓▓
    // ▓▓▓░░▓▓▓▓░░░▓▓▒░░▒▓▓░░░▓▓▓▓░░▓▓▓
    // ▓▓▓░░▒▓▓▓▓▒▒▓▓▓▒▒▓▓▓▓▒▒▓▓▓▓░░▓▓▓
    // ▓▓▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓▓▓
    // ▓▓▓▒░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▒▓▓▓
    // ▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓
    // ▓▓▓▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▒▓▓▓▓
    // ▓▓▓▓▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▒▓▓▓▓
    // ▓▓▓▓▓▒░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒▓▓▓▓▓
    // ▓▓▓▓▓▓░░░▒▓▓▓▓▓▓▓▓▓▓▓▓▒░░░▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓░░░▒▓▓▓▓▓▓▓▓▓▓▒░░░▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▒░░░▒▒▓▓▓▒▒░░░░▒▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░░░░▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▒░░░░░░▒▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x10a5, 0x0c84, 0x0863, 0x0442, 0x0442, 0x0442, 0x0442, 0x0863, 0x0c84, 0x10a5, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x10a5, 0x0863, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0c84, 0x0c84, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0c84, 0x0442, 0x0442, 0x0442, 0xc75a, 0x6e8c, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0xab73, 0x0442, 0x0442, 0x0442, 0x0c84, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0863, 0x0442, 0x0442, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0x0442, 0x0442, 0x0863, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0863, 0x0442, 0xc75a, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0x0442, 0x0442, 0x0863, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0c84, 0x0442, 0x0442, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xc75a, 0x0442, 0x0c84, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0c84, 0x0442, 0x0442, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0x0442, 0x0442, 0x10a5, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0c84, 0x0442, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0x0442, 0x0863, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x10a5, 0x0442, 0x0442, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x0442, 0x0442, 0x10a5, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x0c84, 0x0442, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xc75a, 0x0442, 0x0c84, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x0863, 0x0442, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0x0442, 0x0863, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x0442, 0x0442, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0x0442, 0x0442, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x0442, 0x0442, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x0442, 0x0442, 0xc75a, 0x31ad, 0x31ad, 0xab73, 0x0442, 0x0442, 0x6e8c, 0x31ad, 0x31ad, 0x0442, 0x0442, 0xc75a, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x0442, 0x0442, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x0442, 0x0442, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xc75a, 0x0442, 0x0442, 0x31ad, 0x31ad, 0x6e8c, 0x0442, 0x0442, 0xab73, 0x31ad, 0x31ad, 0xc75a, 0x0442, 0x0442, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x0442, 0x0442, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x0442, 0x0442, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x0442, 0x0442, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x0863, 0x0442, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0x0442, 0x0863, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x0c84, 0x0442, 0xc75a, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0x0442, 0x0c84, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x10a5, 0x0442, 0x0442, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x0442, 0x0442, 0x10a5, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0863, 0x0442, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0x0442, 0x0c84, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x10a5, 0x0442, 0x0442, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0x0442, 0x0442, 0x0c84, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0c84, 0x0442, 0xc75a, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x0442, 0x0442, 0x0c84, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0863, 0x0442, 0x0442, 0x6e8c, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0xc75a, 0x0442, 0x0863, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0863, 0x0442, 0x0442, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0x31ad, 0xab73, 0x0442, 0x0442, 0x0863, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0c84, 0x0442, 0x0442, 0x0442, 0xab73, 0xab73, 0x31ad, 0x31ad, 0x31ad, 0x6e8c, 0x6e8c, 0xc75a, 0x0442, 0x0442, 0x0442, 0x0c84, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x0c84, 0x0c84, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0442, 0x0863, 0x10a5, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x10a5, 0x0c84, 0x0863, 0x0442, 0x0442, 0x0442, 0x0442, 0x0863, 0x0c84, 0x10a5, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 
    0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6, 0x14c6
};
// const tImage icon_menu = { image_data_icon_menu, 32, 32,
//     16 };



==================== FILE: src/view/assets/icon_poweroff.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: icon_poweroff
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_icon_poweroff[1024] = {
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████▓▓▓▒▒▓▓▓████████████
    // █████████▒▒▓▓▓▓░░▓▓▓▓▒▒▓████████
    // ███████▓░░▒▓▓▓▓░░▓▓▓▓▒░░▓███████
    // ██████▓░░▒▓▓▓▓▓░░▓▓▓▓▓▒░░▓██████
    // ██████▒░▒▓▓▓▓▓▓░░▓▓▓▓▓▓▒░▒██████
    // █████▒░▒▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▒░▒█████
    // █████░░▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓░░█████
    // ████▓░▒▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▒░▒████
    // ████▒░▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▒░▒████
    // ████▒░▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓░▒████
    // ████░░▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓░░████
    // ████░░▓▓▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▓▓░░████
    // ████░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░████
    // ████▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░▒████
    // ████▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▓████
    // █████░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓████
    // █████▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▒█████
    // ██████░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓█████
    // ██████▒░░▒▓▓▓▓▓▓▓▓▓▓▓▓▒░░▒██████
    // ███████▒░░▒▓▓▓▓▓▓▓▓▓▓▒░░▒███████
    // ████████▒░░░▒▓▓▓▓▓▒▒░░░▒████████
    // █████████▓▒░░░░░░░░░░▒██████████
    // ███████████▓▓▒░░░░▒▒████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xb6ce, 0x54be, 0x54be, 0xaa6b, 0xaa6b, 0x13b6, 0x75c6, 0x75c6, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcb6b, 0xca6b, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xca6b, 0xcb6b, 0xd3ad, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd3ad, 0xc74a, 0xc74a, 0xaa6b, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xaa6b, 0xc74a, 0xc74a, 0xd3ad, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd3ad, 0xc74a, 0xc74a, 0x6d84, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xaa6b, 0xc74a, 0xc74a, 0xd3ad, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcb6b, 0xc74a, 0x6d84, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x6d84, 0xc74a, 0xcb6b, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcf8c, 0xc74a, 0xaa6b, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xaa6b, 0xc74a, 0xcf8c, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xc74a, 0xc74a, 0x309d, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x309d, 0xc74a, 0xc74a, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd3ad, 0xc74a, 0xaa6b, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x6d84, 0xc74a, 0xcf8c, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcb6b, 0xc74a, 0x309d, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x6d84, 0xc74a, 0xcb6b, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcb6b, 0xc74a, 0x309d, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x309d, 0xc74a, 0xcb6b, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xaa6b, 0xaa6b, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xc74a, 0xc74a, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x309d, 0xc74a, 0xc74a, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcb6b, 0xc74a, 0x6d84, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x309d, 0xc74a, 0xcb6b, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcf8c, 0xc74a, 0x6d84, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xaa6b, 0xc74a, 0xd3ad, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xc74a, 0xc74a, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x309d, 0xc74a, 0xc74a, 0xd3ad, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcf8c, 0xc74a, 0x6d84, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0xaa6b, 0xc74a, 0xcb6b, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xc74a, 0xc74a, 0x6d84, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x6d84, 0xc74a, 0xc74a, 0xd3ad, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcf8c, 0xc74a, 0xc74a, 0x6d84, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x6d84, 0xc74a, 0xc74a, 0xcf8c, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcf8c, 0xc74a, 0xc74a, 0xaa6b, 0x309d, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x13b6, 0x6d84, 0xc74a, 0xc74a, 0xcf8c, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xcf8c, 0xc74a, 0xc74a, 0xc74a, 0xaa6b, 0x309d, 0x309d, 0x13b6, 0x13b6, 0x13b6, 0x6d84, 0x6d84, 0xc74a, 0xc74a, 0xc74a, 0xcf8c, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd3ad, 0xcb6b, 0xc74a, 0xc74a, 0xc74a, 0xc74a, 0xc74a, 0xc74a, 0xc74a, 0xc74a, 0xc74a, 0xc74a, 0xcf8c, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd3ad, 0xd3ad, 0xcb6b, 0xc74a, 0xc74a, 0xc74a, 0xc74a, 0xcb6b, 0xcf8c, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 
    0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce, 0xd7ce
};
// const tImage icon_poweroff = { image_data_icon_poweroff, 32, 32,
//     16 };



==================== FILE: src/view/assets/icon_rtc.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: icon_rtc
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_icon_rtc[1024] = {
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ███████████▓▒▒░░░░▒▒▓███████████
    // █████████▓▒░░░░░░░░░░▒▒█████████
    // ████████▒░░░▒▓▓▓▓▓▒▒░░░▒████████
    // ███████▒░░▒▓▓▓▓▓▓▓▓▓▓▒░░▒███████
    // ██████▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒██████
    // █████▒░░▓▓▓▓▓▓▓▒▒▓▓▓▓▓▓▓▒░▒█████
    // ████▒░░▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓░░▓████
    // ████▒░▒▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▒░▒████
    // ███▓░░▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓░░▓███
    // ███▒░▒▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▒░▒███
    // ███▒░▒▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓░▒███
    // ███░░▓▓▓▓▓▓▓▓▓▓░░▓▓▓▓▓▓▓▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓░░░░░░░░▒▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▒░░░░░░░▒▓▓▓░░███
    // ███░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░███
    // ███▒░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▒███
    // ███▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▒███
    // ███▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓███
    // ████▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▒████
    // ████▓░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒████
    // █████▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒█████
    // ██████▒░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▒██████
    // ███████▒░░▒▓▓▓▓▓▓▓▓▓▓▒░░▒███████
    // ████████▒░░░▒▒▓▓▓▓▓▒░░░▒████████
    // █████████▒▒░░░░░░░░░░▒▓█████████
    // ███████████▓▒▒░░░░▒▒▓███████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x59ad, 0x558c, 0x516b, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x516b, 0x558c, 0x59ad, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x59ad, 0x516b, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x558c, 0x558c, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x558c, 0x4d4a, 0x4d4a, 0x4d4a, 0x1163, 0xb794, 0xb794, 0x7aad, 0x7aad, 0x7aad, 0xf47b, 0xf47b, 0x4d4a, 0x4d4a, 0x4d4a, 0x558c, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x516b, 0x4d4a, 0x4d4a, 0xf47b, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xf47b, 0x4d4a, 0x4d4a, 0x516b, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x516b, 0x4d4a, 0x1163, 0xb794, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xb794, 0x4d4a, 0x4d4a, 0x516b, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x558c, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x1163, 0x1163, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x1163, 0x4d4a, 0x558c, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x558c, 0x4d4a, 0x4d4a, 0xb794, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xb794, 0x4d4a, 0x4d4a, 0x59ad, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x558c, 0x4d4a, 0xf47b, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xf47b, 0x4d4a, 0x516b, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x59ad, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x59ad, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x558c, 0x4d4a, 0xf47b, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x1163, 0x4d4a, 0x558c, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x516b, 0x4d4a, 0xf47b, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xb794, 0x4d4a, 0x516b, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xb794, 0x4d4a, 0x4d4a, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x1163, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x1163, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x1163, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x4d4a, 0x4d4a, 0xb794, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x516b, 0x4d4a, 0xb794, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xf47b, 0x4d4a, 0x516b, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x558c, 0x4d4a, 0x1163, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xf47b, 0x4d4a, 0x558c, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x59ad, 0x4d4a, 0x4d4a, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x59ad, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x516b, 0x4d4a, 0xf47b, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xf47b, 0x4d4a, 0x558c, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x59ad, 0x4d4a, 0x4d4a, 0xb794, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xb794, 0x4d4a, 0x4d4a, 0x558c, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x558c, 0x4d4a, 0x1163, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x4d4a, 0x4d4a, 0x558c, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x516b, 0x4d4a, 0x4d4a, 0xb794, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xb794, 0x1163, 0x4d4a, 0x516b, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x516b, 0x4d4a, 0x4d4a, 0xf47b, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0x7aad, 0xf47b, 0x4d4a, 0x4d4a, 0x516b, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x558c, 0x4d4a, 0x4d4a, 0x4d4a, 0xf47b, 0xf47b, 0x7aad, 0x7aad, 0x7aad, 0xb794, 0xb794, 0x1163, 0x4d4a, 0x4d4a, 0x4d4a, 0x558c, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x558c, 0x558c, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x516b, 0x59ad, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x59ad, 0x558c, 0x516b, 0x4d4a, 0x4d4a, 0x4d4a, 0x4d4a, 0x516b, 0x558c, 0x59ad, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 
    0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce, 0x5dce
};
// const tImage icon_rtc = { image_data_icon_rtc, 32, 32,
//     16 };



==================== FILE: src/view/assets/icon_sleep.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: icon_sleep
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_icon_sleep[1024] = {
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ███████████████████▒▒███████████
    // ████████████▓██████░░███████████
    // ██████████▒░░▓███▒░░░░▒█████████
    // ████████▒░░░░▓███▒░░░░▒█████████
    // ███████▒░░▒░░██████░░███████████
    // ██████▒░░▒▓░░██████▒▒████▒▒█████
    // █████▓░░▒▓▓░░████████████░░█████
    // █████▒░▒▓▓▓▒░▒███████████░░█████
    // ████▓░░▓▓▓▓▒░▒████████▒░░░░░░▒██
    // ████▓░▒▓▓▓▓▓░░████████▒░░░░░░▒██
    // ████▒░▓▓▓▓▓▓▒░▒██████████░░█████
    // ████░░▓▓▓▓▓▓▒░░▓█████████░░█████
    // ████░░▓▓▓▓▓▓▓▒░░█████████▒▒█████
    // ████░░▓▓▓▓▓▓▓▓▒░▒▓██████████████
    // ████░░▓▓▓▓▓▓▓▓▓▒░░▒█████████████
    // ████▒░▒▓▓▓▓▓▓▓▓▓▒░░░▒▓▓███▓█████
    // ████▒░▒▓▓▓▓▓▓▓▓▓▓▓▒░░░░░░░░▓████
    // █████░░▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░░░▓████
    // █████▒░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░▒█████
    // ██████░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓█████
    // ██████▒░░▒▓▓▓▓▓▓▓▓▓▓▓▓▒░░▒██████
    // ███████▒░░▒▓▓▓▓▓▓▓▓▓▓▒░░▒███████
    // ████████▒░░░▒▓▓▓▓▓▒▒░░░▒████████
    // █████████▓▒░░░░░░░░░░▒██████████
    // ███████████▓▓▒░░░░▒▒████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    // ████████████████████████████████
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xb163, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb584, 0xad42, 0xad42, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xad42, 0xad42, 0xad42, 0xad42, 0xb163, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb584, 0xad42, 0xad42, 0xad42, 0xad42, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xad42, 0xad42, 0xad42, 0xad42, 0xb163, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb584, 0xad42, 0xad42, 0x547c, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb584, 0xad42, 0xad42, 0x547c, 0xdaad, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xb163, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xb163, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb9a5, 0xad42, 0xad42, 0x547c, 0xdaad, 0xdaad, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xad42, 0x7163, 0xdaad, 0xdaad, 0xdaad, 0x7163, 0xad42, 0xb584, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb9a5, 0xad42, 0xad42, 0x1795, 0xdaad, 0xdaad, 0xdaad, 0x547c, 0xad42, 0xb584, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xb163, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb9a5, 0xad42, 0x7163, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x1795, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xb163, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xad42, 0x1795, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x547c, 0xad42, 0xb584, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0x1795, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x547c, 0xad42, 0xad42, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x547c, 0xad42, 0xad42, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xb163, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x7163, 0xad42, 0xb163, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x7163, 0xad42, 0xad42, 0xb584, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb163, 0xad42, 0x547c, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x547c, 0xad42, 0xad42, 0xad42, 0xb163, 0xb9a5, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb584, 0xad42, 0x547c, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x1795, 0x7163, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x1795, 0x547c, 0x7163, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb584, 0xad42, 0x547c, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x7163, 0xad42, 0xb163, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xad42, 0xad42, 0x547c, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x547c, 0xad42, 0xad42, 0xb9a5, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb584, 0xad42, 0xad42, 0x547c, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x547c, 0xad42, 0xad42, 0xb584, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb584, 0xad42, 0xad42, 0x7163, 0x1795, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0xdaad, 0x547c, 0xad42, 0xad42, 0xb584, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb584, 0xad42, 0xad42, 0xad42, 0x7163, 0x1795, 0x1795, 0xdaad, 0xdaad, 0xdaad, 0x547c, 0x547c, 0xad42, 0xad42, 0xad42, 0xb584, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb9a5, 0xb163, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xad42, 0xb584, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xb9a5, 0xb9a5, 0xb163, 0xad42, 0xad42, 0xad42, 0xad42, 0xb163, 0xb584, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 
    0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6, 0xbdc6
};
// const tImage icon_sleep = { image_data_icon_sleep, 32, 32,
//     16 };



==================== FILE: src/view/assets/icon_wifi.h ====================


/*******************************************************************************
* generated by lcd-image-converter rev.030b30d from 2019-03-17 01:38:34 +0500
* image
* filename: unsaved
* name: icon_wifi
*
* preset name: Color R5G6B5
* data block size: 16 bit(s), uint16_t
* RLE compression enabled: no
* conversion type: Color, not_used not_used
* split to rows: yes
* bits per pixel: 16
*
* preprocess:
*  main scan direction: top_to_bottom
*  line scan direction: forward
*  inverse: no
*******************************************************************************/

/*
 typedef struct {
     const uint16_t *data;
     uint16_t width;
     uint16_t height;
     uint8_t dataSize;
     } tImage;
*/
#include <stdint.h>



static const uint16_t image_data_icon_wifi[1024] = {
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▒▒░░░░░░░░▒▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▒░░░░░░░░░░░░░░░░▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▒░░░░░▒▒▒▓▓▓▒▒▒▒░░░░░▒▓▓▓▓▓
    // ▓▓▓▒░░░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░░░▓▓▓▓
    // ▓▓▒░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░░░▓▓
    // ▓░░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▒▓
    // ▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓
    // ▓▒░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒▓
    // ▓▓░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░▓▓
    // ▓▓▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓▓▓
    // ▓▓▓▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓▓▓▓
    // ▓▓▓▓▒░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▓▓▓▓▓
    // ▓▓▓▓▓▒░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░░▒▓▓▓▓▓
    // ▓▓▓▓▓▓▒░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓░░░▓▓▓▓▓▓▓▓▓▓▓▓░░░▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓░░▒▓▓▓▓▓▓▓▓▓▓▒░░▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓░░▒▓▓▓▓▓▓▓▓▒░░▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▒░░▒▓▓▓▓▓▓▒░░▒▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▒░░▒▓▓▓▓▒░░▒▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▒░░▓▓▓▓░░▒▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓░░▒▓▓░░░▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒▒░░▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2cb3, 0x2892, 0x2892, 0x2471, 0x2471, 0x2471, 0x2892, 0x2892, 0x2892, 0x2cb3, 0x30d4, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2892, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2471, 0x2892, 0x30d4, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2471, 0x2471, 0x2471, 0x2471, 0xe791, 0xaaaa, 0x8ec3, 0x8ec3, 0x51dc, 0x51dc, 0x51dc, 0x8ec3, 0x8ec3, 0x8ec3, 0xaaaa, 0xe791, 0x2471, 0x2471, 0x2471, 0x2471, 0x2cb3, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2471, 0x2471, 0x2471, 0xe791, 0xaaaa, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x8ec3, 0xe791, 0x2471, 0x2471, 0x2471, 0x30d4, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x2cb3, 0x2471, 0x2471, 0xaaaa, 0xaaaa, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x8ec3, 0xe791, 0x2471, 0x2471, 0x2892, 0x34f5, 0x34f5, 
    0x34f5, 0x2892, 0x2471, 0x2471, 0xaaaa, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xaaaa, 0x2471, 0x2471, 0x2cb3, 0x34f5, 
    0x34f5, 0x2471, 0x2471, 0x8ec3, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x8ec3, 0x2471, 0x2892, 0x34f5, 
    0x34f5, 0x2cb3, 0x2471, 0x2471, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xe791, 0x2471, 0x2cb3, 0x34f5, 
    0x34f5, 0x34f5, 0x2892, 0x2471, 0xe791, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xe791, 0x2471, 0x2892, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x2471, 0x2471, 0xaaaa, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xaaaa, 0x2471, 0x2892, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x30d4, 0x2471, 0x2471, 0xaaaa, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xaaaa, 0x2471, 0x2471, 0x30d4, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2471, 0x2471, 0xaaaa, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x8ec3, 0x2471, 0x2471, 0x30d4, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2471, 0x2471, 0x8ec3, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x8ec3, 0x2471, 0x2471, 0x2cb3, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2471, 0x2471, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xe791, 0x2471, 0x2cb3, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2892, 0x2471, 0xe791, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xe791, 0x2471, 0x2892, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2471, 0x2471, 0xaaaa, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xaaaa, 0x2471, 0x2471, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x30d4, 0x2471, 0x2471, 0xaaaa, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xaaaa, 0x2471, 0x2471, 0x30d4, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2471, 0x2471, 0xaaaa, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x8ec3, 0x2471, 0x2471, 0x2cb3, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2471, 0x2471, 0x8ec3, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0x8ec3, 0x2471, 0x2471, 0x2cb3, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2cb3, 0x2471, 0xe791, 0x51dc, 0x51dc, 0x51dc, 0x51dc, 0xe791, 0x2471, 0x2cb3, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2892, 0x2471, 0xaaaa, 0x51dc, 0x51dc, 0xe791, 0x2471, 0x2892, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x2471, 0x2471, 0xaaaa, 0xaaaa, 0x2471, 0x2471, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x30d4, 0x2471, 0x2471, 0x2471, 0x2471, 0x30d4, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x30d4, 0x2892, 0x2471, 0x2cb3, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 
    0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5, 0x34f5
};
// const tImage icon_wifi = { image_data_icon_wifi, 32, 32,
//     16 };



==================== FILE: src/view/view.cpp ====================

/**
 * @file view.cpp
 * @author Forairaaaaa
 * @brief
 * @version 0.1
 * @date 2024-01-08
 *
 * @copyright Copyright (c) 2024
 *
 */
#include "../factory_test/factory_test.h"
#include "assets/assets.h"
#include <Arduino.h>
#include <smooth_ui_toolkit.h>

static FactoryTest* _ft = nullptr;

using namespace SmoothUIToolKit;
using namespace SmoothUIToolKit::SelectMenu;

struct AppOptionRenderProps_t
{
    std::uint32_t theme_color;
    std::uint32_t tag_color;
    const char* tag;
    const std::uint16_t* icon;
};
constexpr int _app_render_props_list_size = 8;
constexpr AppOptionRenderProps_t _app_render_props_list[] = {
    {0xB8DBD9, 0x385B59, "DISPLAY TEST", image_data_icon_display},
    {0x87C38F, 0x07430F, "BRIGHTNESS", image_data_icon_brightness},
    {0xC9C9EE, 0x49496E, "RTC TIME", image_data_icon_rtc},
    {0xF6A4A4, 0x762424, "WIFI SCAN", image_data_icon_wifi},
    {0x6AB8A0, 0x163820, "ENCODER TEST", image_data_icon_encoder},
    // {0xC2C1A5, 0x424125, "MENU DEMO", image_data_icon_menu},
    {0xF5C396, 0x754316, "ARKANOID", image_data_icon_game},
    {0xC6D5EF, 0x46556F, "SLEEP&WAKEUP", image_data_icon_sleep},
    {0xCEDBB8, 0x4E5B38, "POWER OFF", image_data_icon_poweroff},
};

static Transition2D* _batv_panel_transition = nullptr;
static std::uint32_t _batv_time_count = 0;
static char _batv[10] = {0};
static int _last_enc_postion = 0;
static bool _is_just_boot_in = true;

class LauncherMenu : public SmoothOptions
{
    bool _wait_button_released = false;
    bool _is_pressing = false;
    int _matching_index = 0;

    void onReadInput() override
    {
        if (isOpening())
            return;

        // Update navigation
        _ft->_check_encoder(true);
        if (_ft->_enc.getPosition() != _last_enc_postion)
        {
            if (_ft->_enc.getPosition() < _last_enc_postion)
            {
                goLast();
            }
            else if (_ft->_enc.getPosition() > _last_enc_postion)
            {
                goNext();
            }

            _last_enc_postion = _ft->_enc.getPosition();
            // printf("%d\n", _last_enc_postion);
            // printf("%d\n", (int)_ft->_enc.getPosition());
            // printf("%d\n", _ft->_enc.getCount());
        }

        // If just boot in, lock until button released
        if (_is_just_boot_in)
        {
            // If not pressing
            if (_ft->_btn_pwr.read())
            {
                _is_just_boot_in = false;
            }
        }

        // If select
        else if (!_ft->_btn_pwr.read())
        {
            if (!_wait_button_released)
            {
                _ft->_tone(2500, 50);

                _wait_button_released = true;
                _is_pressing = true;

                // Squeeze it
                press({0, 12, 240, 52});
            }
        }

        // Unlock if no button is pressing
        else
        {
            _wait_button_released = false;
            if (_is_pressing)
            {
                _is_pressing = false;
                release();
            }
        }
    }

    void onRender() override
    {
        // Clear
        _ft->_canvas->fillScreen(TFT_WHITE);

        // Render batv panel
        _ft->_canvas->pushImage(
            _batv_panel_transition->getValue().x, _batv_panel_transition->getValue().y, 83, 54, image_data_bat_panel);
        _ft->_canvas->setTextDatum(top_left);
        _ft->_canvas->setTextColor(0x7F5845);
        _ft->_canvas->setFont(&fonts::efontCN_16);
        _ft->_canvas->drawString("Bat:", _batv_panel_transition->getValue().x + 6, _batv_panel_transition->getValue().y + 13);
        _ft->_canvas->setFont(&fonts::efontCN_24);
        _ft->_canvas->drawString(_batv, _batv_panel_transition->getValue().x + 4, _batv_panel_transition->getValue().y + 29);

        // Render options
        int y_offset = 6;
        _ft->_canvas->setTextDatum(top_right);
        for (int i = getKeyframeList().size() - 1; i >= 0; i--)
        {
            getMatchingOptionIndex(i, _matching_index);

            // Render cards
            _ft->_canvas->fillSmoothRoundRect(getOptionCurrentFrame(_matching_index).x,
                                              getOptionCurrentFrame(_matching_index).y,
                                              getOptionCurrentFrame(_matching_index).w,
                                              getOptionCurrentFrame(_matching_index).h,
                                              20,
                                              _app_render_props_list[_matching_index].theme_color);

            // Render icons
            if (!isOpening())
            {
                if (i <= 1)
                {
                    y_offset = getOptionCurrentFrame(_matching_index).y + 16 -
                               std::abs(getOptionCurrentFrame(_matching_index).y - getKeyframe(0).y) * 10 / 75;
                    if (isPressing())
                        y_offset = i == 0 ? getKeyframe(0).y + 16 : getKeyframe(1).y + 6;
                }
                else
                    y_offset = getOptionCurrentFrame(_matching_index).y + 6;

                _ft->_canvas->pushImage(getOptionCurrentFrame(_matching_index).x + 13,
                                        y_offset,
                                        32,
                                        32,
                                        _app_render_props_list[_matching_index].icon);
                // spdlog::info("{} {}", std::abs(getOptionCurrentFrame(_matching_index).y - getKeyframe(0).y), y_offset);
            }

            // Render tags
            if (i == 0 && !isOpening())
            {
                _ft->_canvas->setTextColor(_app_render_props_list[_matching_index].tag_color);
                _ft->_canvas->drawString(_app_render_props_list[_matching_index].tag, 218, 26);
            }
        }

        // Push
        _ft->_canvas_update();
    }

    void onPress() override
    {
        // Set press anim
        setDuration(200);
        setTransitionPath(EasingPath::easeOutQuad);
    }

    void onClick() override
    {
        // Set open anim
        setDuration(300);
        setTransitionPath(EasingPath::easeOutQuad);

        open({-20, -20, 280, 175});
    }

    void onOpenEnd() override
    {
        _open_app();

        // Reset anim
        setPositionDuration(600);
        setPositionTransitionPath(EasingPath::easeOutBack);
        setShapeDuration(400);

        // Close option
        close();
        _ft->_enc.setPosition(_last_enc_postion);
        _ft->_canvas->setFont(&fonts::efontCN_24);
        _ft->_canvas->setTextSize(1);
    }

    void _open_app()
    {
        int matching_index = getSelectedOptionIndex();
        if (matching_index == 0)
            _ft->_disp_test();
        else if (matching_index == 1)
            _ft->_disp_set_brightness();
        else if (matching_index == 2)
            _ft->_rtc_test();
        else if (matching_index == 3)
            _ft->_wifi_test();
        else if (matching_index == 4)
            _ft->_encoder_test_user();
        // else if (matching_index == 5)
        //     printf("todo\n");
        else if (matching_index == 5)
            _ft->_arkanoid_start();
        else if (matching_index == 6)
            _ft->_rtc_wakeup_test_user();
        else if (matching_index == 7)
            _ft->_power_off();
    }
};

static LauncherMenu* _launcher_menu = nullptr;

void view_create(FactoryTest* ft)
{
    _ft = ft;
    _ft->_enc.setPosition(_last_enc_postion);
    _ft->_canvas->setFont(&fonts::efontCN_16);
    _ft->_canvas->setTextSize(1);

    // Create menu
    _launcher_menu = new LauncherMenu;

    // Further narrowed positions for better fit
    _launcher_menu->addOption();
    _launcher_menu->setLastKeyframe({5, 10, 170, 50}); // Main selected option narrower

    // Adjust waiting line positions for better fit
    for (int i = 0; i < _app_render_props_list_size - 2; i++)
    {
        _launcher_menu->addOption();
        _launcher_menu->setLastKeyframe({5, 65 + 45 * i, 170, 35}); // Narrower bars
    }

    // Set the last one next to selected one to smooth the loop
    _launcher_menu->addOption();
    _launcher_menu->setLastKeyframe({5, 65 + 45 * (_app_render_props_list_size - 2), 170, 35});

    // Config
    _launcher_menu->setConfig().renderInterval = 20;
    _launcher_menu->setConfig().readInputInterval = 50;
    _launcher_menu->setPositionDuration(600);
    _launcher_menu->setPositionTransitionPath(EasingPath::easeOutBack);
    _launcher_menu->setShapeDuration(400);

    // Create bat voltage panel transition
    _batv_panel_transition = new Transition2D(-83, 135);
    _batv_panel_transition->moveTo(5, 5);
    _batv_panel_transition->setDelay(300);
    _batv_panel_transition->setDuration(800);
    float bat_v = (float)analogReadMilliVolts(10) * 2 / 1000;
    snprintf(_batv, 10, "%.1fV", bat_v);
}

void view_update()
{
    _launcher_menu->update(millis());
    _batv_panel_transition->update(millis());

    // Read bat voltage
    if (millis() - _batv_time_count > 3000)
    {
        float bat_v = (float)analogReadMilliVolts(10) * 2 / 1000;
        snprintf(_batv, 10, "%.1fV", bat_v);
        _batv_time_count = millis();
    }
}
